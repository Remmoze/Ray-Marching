{"version":3,"sources":["redux/configSlice.jsx","redux/dotsSlice.jsx","redux/gradientSlice.jsx","redux/store.jsx","components/settings/gradient/colorItem.jsx","components/settings/gradient/colorsAdder.jsx","components/settings/components/settingsSlider.jsx","components/settings/common/rotation.jsx","components/settings/modes/Gradient.jsx","components/settings/imageSlider/fileUploader.jsx","components/settings/modes/ImageSlider.jsx","components/settings/modes/Radial.jsx","components/settings/components/settingsCheckbox.jsx","components/settings/modes/Dots.jsx","components/settings/modes/Blinking.jsx","components/settings/modes/modesMenu.jsx","components/settings/modeSelector.jsx","components/settings/SettingsContainer.jsx","components/settings/SettingsOverlay.jsx","components/display/canvas/windowSize.jsx","components/display/canvas/useCanvas.jsx","components/display/drawing/GradientFactory.jsx","components/display/drawing/display modes/Dots/Vector2.js","components/display/drawing/display modes/Dots/Dot.js","components/display/drawing/display modes/dots.js","components/display/drawing/canvasUpdate.jsx","components/display/drawing/display modes/gradient.js","components/display/drawing/display modes/blinking.js","components/display/drawing/display modes/radial.js","components/display/drawing/PatternFactory.jsx","components/display/canvas/Canvas.jsx","content/city.jpg","components/display/canvas/useTimer.jsx","components/display/canvas/ImageDisplay.jsx","components/display/canvas/Display.jsx","components/MainContainer.jsx","index.js"],"names":["configSlice","createSlice","name","initialState","debug","mode","imageUrl","reducers","setImageUrl","state","payload","setMode","actions","dotsSlice","speed","count","maxDistance","showDots","curved","setSpeed","setCount","console","log","setShowDots","setMaxDistance","setCurved","gradientSlice","rotation","Math","PI","colors","setColors","addColor","push","setColorByIndex","index","color","deleteColorByIndex","splice","setRotation","rootReducer","combineReducers","config","configReducer","dots","dotsReducer","gradient","storage","configureStore","reducer","changeColor","dispatch","setError","strColor","s","Option","style","isColor","ColorItem","blockDelete","useState","error","useDispatch","ListItem","disablePadding","ml","mr","sx","width","height","backgroundColor","border","borderColor","borderRadius","opacity","ListItemText","TextField","onChange","target","value","id","variant","defaultValue","IconButton","disabled","onClick","ColorsList","useSelector","Grid","item","mt","container","direction","alignItems","length","floor","random","toString","toUpperCase","List","bgcolor","TransitionGroup","map","Collapse","Divider","SettingsSlider","label","min","max","step","setValue","Slider","e","valueLabelDisplay","Rotation","angle","rotationValue","setRotationValue","toFixed","changeRotation","Gradient","store","newValue","FileUploader","currentImageUrl","setCurrentImageUrl","uploadInputRef","useRef","ref","type","accept","image","currentUrl","setCurrentUrl","window","URL","revokeObjectURL","newUrl","createObjectURL","loadFile","files","hidden","Button","current","click","ImageSlider","Typography","mb","Radial","SettingsCheckbox","checked","setChecked","Checkbox","display","Dots","Blinking","Modes","component","Mode","FormControl","fullWidth","InputLabel","Select","MenuItem","find","SettingsContainer","spacing","padding","justifyContent","gutterBottom","SettingsOverlay","Box","position","top","left","maxWidth","SettingsRef","React","forwardRef","props","AnimatedSettingsOverlay","active","Slide","timeout","enter","exit","easing","in","appear","mountOnEnter","unmountOnExit","useWindowSize","innerWidth","innerHeight","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","frameCount","useCanvas","draw","displayImage","setdisplayImage","canvasRef","animationFrameId","context","getContext","src","Promise","resolve","reject","Image","then","render","requestAnimationFrame","cancelAnimationFrame","getRadius","canvas","realRadius","sqrt","getRealRadius","colorStopWidth","radius","getColorStopWidth","getSpeed","addColorStops","i","colorOffset","addColorStop","createGradientType","storeGradient","x1","cos","y1","sin","x2","y2","createLinearGradient","getLinearGradient","Vector2","x","y","this","vector2","Dot","pos","vel","setVelocity","add","limit","fillStyle","beginPath","arc","fill","createDot","canv","h","v","r","g","b","f","p","q","t","get","num","res","hsvToRgb","lastSpeed","updateDots","updateCount","dot","update","fillRect","lineWidth","point1","j","point2","distanceSrt","distance","alpha","strokeStyle","lineCap","moveTo","bezierCurveTo","getBezier","lineTo","stroke","Connect","createFillStyle","createGradient","createBlinking","createRadialGradient","getRadialGradient","createRadial","createPattern","getImagePattern","createImageSlider","getDrawType","drawUpdate","CanvasUpdate","font","textAlign","fillText","drawDefault","drawDebug","Canvas","useTimer","callback","requestRef","previousTimeRef","animate","time","undefined","deltaTime","ImageDisplay","winWidth","winHeight","offset","setOffset","dt","prev","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","Display","MainContainer","setCheck","bottom","theme","createTheme","palette","App","StrictMode","ThemeProvider","CssBaseline","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9aa3bb61.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst configSlice = createSlice({\r\n    name: \"config\",\r\n    initialState: {\r\n        debug: false,\r\n        mode: \"Dots\",\r\n        imageUrl: null,\r\n    },\r\n    reducers: {\r\n        setImageUrl: (state, { payload }) => {\r\n            state.imageUrl = payload;\r\n        },\r\n\r\n        /*\r\n            Should add a smooth transition between colors\r\n            https://stackoverflow.com/questions/30196043/how-to-display-a-smoother-gradient-in-html5-canvas\r\n            https://stackoverflow.com/questions/21835739/smooth-color-transition-algorithm\r\n        */\r\n\r\n        setMode: (state, { payload }) => {\r\n            state.mode = payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setImageUrl, setMode } = configSlice.actions;\r\n\r\nexport default configSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst dotsSlice = createSlice({\r\n    name: \"dots\",\r\n    initialState: {\r\n        speed: 50,\r\n        count: 100,\r\n        maxDistance: 120,\r\n        showDots: true,\r\n        curved: false,\r\n    },\r\n    reducers: {\r\n        setSpeed: (state, { payload }) => {\r\n            state.speed = payload;\r\n        },\r\n        setCount: (state, { payload }) => {\r\n            console.log(payload);\r\n            state.count = payload;\r\n        },\r\n        setShowDots: (state, { payload }) => {\r\n            state.showDots = payload;\r\n        },\r\n        setMaxDistance: (state, { payload }) => {\r\n            state.maxDistance = payload;\r\n        },\r\n        setCurved: (state, { payload }) => {\r\n            state.curved = payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setSpeed, setCount, setShowDots, setMaxDistance, setCurved } = dotsSlice.actions;\r\n\r\nexport default dotsSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst gradientSlice = createSlice({\r\n    name: \"gradient\",\r\n    initialState: {\r\n        speed: 100,\r\n        rotation: (Math.PI * 5) / 8, //radians\r\n        colors: [\r\n            \"#FF0000\", // Red\r\n            \"#FFA500\", // Orange\r\n            \"#FFFF00\", // Yellow\r\n            \"#008000\", // Green\r\n            \"#0000FF\", // Blue\r\n            \"#4B0082\", // Indigo\r\n            \"#EE82EE\", // Violet\r\n        ],\r\n        imageUrl: null,\r\n    },\r\n    reducers: {\r\n        /*\r\n            Should add a smooth transition between colors\r\n            https://stackoverflow.com/questions/30196043/how-to-display-a-smoother-gradient-in-html5-canvas\r\n            https://stackoverflow.com/questions/21835739/smooth-color-transition-algorithm\r\n        */\r\n\r\n        setColors: (state, { payload }) => {\r\n            state.colors = payload;\r\n        },\r\n        addColor: (state, { payload }) => {\r\n            state.colors.push(payload);\r\n        },\r\n        setColorByIndex: (state, { payload }) => {\r\n            state.colors[payload.index] = payload.color;\r\n        },\r\n        deleteColorByIndex: (state, { payload }) => {\r\n            state.colors.splice(payload, 1);\r\n        },\r\n        setSpeed: (state, { payload }) => {\r\n            state.speed = payload;\r\n        },\r\n        setRotation: (state, { payload }) => {\r\n            state.rotation = payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setSpeed, setRotation, addColor, setColorByIndex, deleteColorByIndex } = gradientSlice.actions;\r\n\r\nexport default gradientSlice.reducer;\r\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport configReducer from \"./configSlice\";\r\nimport dotsReducer from \"./dotsSlice\";\r\nimport gradientSlice from \"./gradientSlice\";\r\n\r\nconst rootReducer = combineReducers({\r\n    config: configReducer,\r\n    dots: dotsReducer,\r\n    gradient: gradientSlice,\r\n});\r\n\r\nconst storage = configureStore({\r\n    reducer: rootReducer,\r\n});\r\n\r\nexport default storage;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\n\r\nimport { IconButton, TextField } from \"@mui/material\";\r\nimport { ListItem, ListItemText } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\n\r\nimport { deleteColorByIndex, setColorByIndex } from \"../../../redux/gradientSlice\";\r\n\r\nconst isColor = (strColor) => {\r\n    const s = new Option().style;\r\n    s.color = strColor;\r\n    return s.color !== \"\";\r\n};\r\n\r\nconst changeColor = (dispatch, index, color, setError) => {\r\n    if (!isColor(color)) {\r\n        setError(true);\r\n        return;\r\n    }\r\n    setError(false);\r\n    dispatch(setColorByIndex({ index, color }));\r\n};\r\n\r\nconst ColorItem = ({ color, index, blockDelete }) => {\r\n    const [error, setError] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ListItem disablePadding>\r\n            <Box\r\n                ml={1}\r\n                mr={1}\r\n                sx={{\r\n                    width: 70,\r\n                    height: 25,\r\n                    backgroundColor: color,\r\n                    border: 2,\r\n                    borderColor: \"#aaaaaa\",\r\n                    borderRadius: 2,\r\n                    \"&:hover\": {\r\n                        backgroundColor: color,\r\n                        opacity: [0.8, 0.8, 0.8],\r\n                    },\r\n                }}\r\n            />\r\n\r\n            <ListItemText>\r\n                <TextField\r\n                    onChange={({ target }) => changeColor(dispatch, index, target.value, setError)}\r\n                    id=\"standard-basic\"\r\n                    variant=\"standard\"\r\n                    color={error ? \"error\" : \"primary\"}\r\n                    defaultValue={color}\r\n                />\r\n            </ListItemText>\r\n            <IconButton\r\n                disabled={blockDelete}\r\n                onClick={() => {\r\n                    dispatch(deleteColorByIndex(index));\r\n                }}\r\n            >\r\n                <DeleteIcon />\r\n            </IconButton>\r\n        </ListItem>\r\n    );\r\n};\r\n\r\nexport default ColorItem;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\n\r\nimport { Grid, IconButton } from \"@mui/material\";\r\nimport { List, Divider } from \"@mui/material\";\r\nimport { Collapse } from \"@mui/material\";\r\n\r\nimport { addColor } from \"../../../redux/gradientSlice\";\r\nimport ColorItem from \"./colorItem\";\r\n\r\nimport { TransitionGroup } from \"react-transition-group\";\r\n\r\nconst RandomColor = () => {\r\n    return (\r\n        \"#\" +\r\n        Math.floor(Math.random() * 16777215)\r\n            .toString(16)\r\n            .toUpperCase()\r\n    );\r\n};\r\n\r\nconst ColorsList = () => {\r\n    const gradient = useSelector((storage) => storage.gradient);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Grid item mt={-1}>\r\n            <Grid container direction=\"row\" alignItems=\"center\">\r\n                <Grid item>Colors</Grid>\r\n                <Grid item>\r\n                    <IconButton\r\n                        disabled={gradient.colors.length >= 9}\r\n                        onClick={() => dispatch(addColor(RandomColor()))}\r\n                    >\r\n                        <AddIcon />\r\n                    </IconButton>\r\n                </Grid>\r\n            </Grid>\r\n            <List sx={{ width: \"100%\", bgcolor: \"#00000050\", borderRadius: 3 }}>\r\n                <TransitionGroup>\r\n                    {gradient.colors.map((color, index) => (\r\n                        <Collapse key={color}>\r\n                            {index !== 0 && <Divider />}\r\n                            <ColorItem blockDelete={gradient.colors.length < 2} color={color} index={index}></ColorItem>\r\n                        </Collapse>\r\n                    ))}\r\n                </TransitionGroup>\r\n            </List>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default ColorsList;\r\n","import React, { useState } from \"react\";\r\nimport { Grid, Slider } from \"@mui/material\";\r\n\r\nconst SettingsSlider = ({ defaultValue, label, onChange, min, max, step, color }) => {\r\n    const [value, setValue] = useState(defaultValue);\r\n    return (\r\n        <>\r\n            <Grid item>{label}</Grid>\r\n            <Grid item>\r\n                <Slider\r\n                    sx={{ color }}\r\n                    onChange={(e, value) => {\r\n                        setValue(value);\r\n                        onChange(value);\r\n                    }}\r\n                    defaultValue={value}\r\n                    min={min}\r\n                    max={max}\r\n                    step={step}\r\n                    value={value}\r\n                    valueLabelDisplay=\"off\"\r\n                />\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SettingsSlider;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Grid, Slider } from \"@mui/material\";\r\n\r\nimport { setRotation } from \"../../../redux/gradientSlice\";\r\n\r\nconst getRotationLabel = (angle) => {\r\n    return `${angle.toFixed(2)} rad / ${((angle * 180) / Math.PI).toFixed(2)} degrees`;\r\n};\r\n\r\nconst changeRotation = (rotation, setRotationValue, dispatch) => {\r\n    setRotationValue(rotation);\r\n    dispatch(setRotation(rotation));\r\n};\r\n\r\nconst Rotation = () => {\r\n    const gradient = useSelector((storage) => storage.gradient);\r\n    const dispatch = useDispatch();\r\n    const [rotationValue, setRotationValue] = useState(gradient.rotation);\r\n    return (\r\n        <>\r\n            <Grid item>Rotation - {getRotationLabel(gradient.rotation)}</Grid>\r\n            <Grid item>\r\n                <Slider\r\n                    onChange={(e, value) => changeRotation(value, setRotationValue, dispatch)}\r\n                    defaultValue={rotationValue}\r\n                    min={0}\r\n                    max={Math.PI * 2}\r\n                    //step={Math.PI / 4}\r\n                    step={0.01}\r\n                    value={rotationValue}\r\n                    valueLabelDisplay=\"off\"\r\n                />\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Rotation;\r\n","import ColorsList from \"../gradient/colorsAdder\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport SettingsSlider from \"../components/settingsSlider\";\r\nimport { setSpeed } from \"../../../redux/gradientSlice\";\r\nimport Rotation from \"../common/rotation\";\r\n\r\nconst Gradient = () => {\r\n    const gradient = useSelector((store) => store.gradient);\r\n    const dispatch = useDispatch();\r\n\r\n    const changeSpeed = (newValue) => {\r\n        dispatch(setSpeed(newValue));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <SettingsSlider\r\n                defaultValue={gradient.speed}\r\n                label={\"Speed\"}\r\n                min={1}\r\n                max={100}\r\n                step={1}\r\n                onChange={changeSpeed}\r\n                color={gradient.speed > 20 ? \"auto\" : \"red\"}\r\n            />\r\n            <Rotation />\r\n            <ColorsList />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Gradient;\r\n","import React, { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { Button } from \"@mui/material\";\r\nimport { setImageUrl } from \"../../../redux/configSlice\";\r\n\r\nconst loadFile = (image, dispatch, currentUrl, setCurrentUrl) => {\r\n    if (currentUrl !== null) {\r\n        window.URL.revokeObjectURL(currentUrl);\r\n    }\r\n    let newUrl = window.URL.createObjectURL(image);\r\n    dispatch(setImageUrl(newUrl));\r\n    setCurrentUrl(newUrl);\r\n};\r\n\r\nconst FileUploader = () => {\r\n    const dispatch = useDispatch();\r\n    const [currentImageUrl, setCurrentImageUrl] = useState(null);\r\n\r\n    const uploadInputRef = useRef(null);\r\n    return (\r\n        <>\r\n            <input\r\n                ref={uploadInputRef}\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={({ target }) => loadFile(target.files[0], dispatch, currentImageUrl, setCurrentImageUrl)}\r\n                hidden\r\n            />\r\n            <Button onClick={() => uploadInputRef.current && uploadInputRef.current.click()} variant=\"outlined\">\r\n                Upload image\r\n            </Button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FileUploader;\r\n","import FileUploader from \"../imageSlider/fileUploader\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport SettingsSlider from \"../components/settingsSlider\";\r\nimport { setSpeed } from \"../../../redux/gradientSlice\";\r\nimport Rotation from \"../common/rotation\";\r\nimport { Typography } from \"@mui/material\";\r\n\r\n// const ImageSlider = {\r\n//     name: \"image\",\r\n//     displayName: \"Image\",\r\n//     children: [\r\n//         <Speed minVal={1} maxVal={200} key={\"ImageSpeed\"} />,\r\n//         <Rotation key={\"ImageRotation\"} />,\r\n//         <FileUploader key={\"ImageFileUploader\"} />,\r\n//     ],\r\n// };\r\n\r\n// export default ImageSlider;\r\n\r\nconst ImageSlider = () => {\r\n    const gradient = useSelector((store) => store.gradient);\r\n    const dispatch = useDispatch();\r\n\r\n    const changeSpeed = (newValue) => {\r\n        dispatch(setSpeed(newValue));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Typography mt={5} mb={5}>\r\n                Currently broken.\r\n            </Typography>\r\n            <SettingsSlider\r\n                defaultValue={gradient.speed}\r\n                label={\"Speed\"}\r\n                min={1}\r\n                max={100}\r\n                step={1}\r\n                onChange={changeSpeed}\r\n            />\r\n            <Rotation />\r\n            <FileUploader />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ImageSlider;\r\n","import ColorsList from \"../gradient/colorsAdder\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport SettingsSlider from \"../components/settingsSlider\";\r\nimport { setSpeed } from \"../../../redux/gradientSlice\";\r\n\r\nconst Radial = () => {\r\n    const gradient = useSelector((store) => store.gradient);\r\n    const dispatch = useDispatch();\r\n\r\n    const changeSpeed = (newValue) => {\r\n        dispatch(setSpeed(newValue));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <SettingsSlider\r\n                defaultValue={gradient.speed}\r\n                label={\"Speed\"}\r\n                min={1}\r\n                max={100}\r\n                step={1}\r\n                onChange={changeSpeed}\r\n                color={gradient.speed > 20 ? \"auto\" : \"red\"}\r\n            />\r\n            <ColorsList />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Radial;\r\n","import React, { useState } from \"react\";\r\nimport { Checkbox, Grid, Typography } from \"@mui/material\";\r\n\r\nconst SettingsCheckbox = ({ defaultValue, label, onChange }) => {\r\n    const [checked, setChecked] = useState(defaultValue);\r\n    return (\r\n        <Grid mt={-1} ml={-1.5} item>\r\n            <Checkbox\r\n                checked={checked}\r\n                onChange={(e, value) => {\r\n                    setChecked(value);\r\n                    onChange(value);\r\n                }}\r\n            />\r\n            <Typography mt={1} sx={{ display: \"inline\" }}>\r\n                {label}\r\n            </Typography>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SettingsCheckbox;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { setCount, setShowDots, setSpeed, setMaxDistance, setCurved } from \"../../../redux/dotsSlice\";\r\n\r\nimport SettingsSlider from \"../components/settingsSlider\";\r\nimport SettingsCheckbox from \"../components/settingsCheckbox\";\r\n\r\nconst Dots = () => {\r\n    const dots = useSelector((storage) => storage.dots);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <>\r\n            <SettingsSlider\r\n                defaultValue={dots.speed}\r\n                label={\"Speed - \" + dots.speed + \" pixels/s\"}\r\n                min={1}\r\n                max={50}\r\n                step={1}\r\n                onChange={(value) => dispatch(setSpeed(value))}\r\n            />\r\n            <SettingsSlider\r\n                defaultValue={dots.count}\r\n                label={\"Count - \" + dots.count}\r\n                min={0}\r\n                max={250}\r\n                step={1}\r\n                onChange={(value) => dispatch(setCount(value))}\r\n            />\r\n            <SettingsSlider\r\n                defaultValue={dots.maxDistance}\r\n                label={\"Max distance - \" + dots.maxDistance + \" pixels\"}\r\n                min={100}\r\n                max={200}\r\n                step={1}\r\n                onChange={(value) => dispatch(setMaxDistance(value))}\r\n            />\r\n            <SettingsCheckbox\r\n                defaultValue={dots.showDots}\r\n                label={\"Show Dots\"}\r\n                onChange={(value) => dispatch(setShowDots(value))}\r\n            />\r\n            <SettingsCheckbox\r\n                defaultValue={dots.curved}\r\n                label={\"Curved\"}\r\n                onChange={(value) => dispatch(setCurved(value))}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Dots;\r\n","import ColorsList from \"../gradient/colorsAdder\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport SettingsSlider from \"../components/settingsSlider\";\r\nimport { setSpeed } from \"../../../redux/gradientSlice\";\r\n\r\nconst Blinking = () => {\r\n    const gradient = useSelector((store) => store.gradient);\r\n    const dispatch = useDispatch();\r\n\r\n    const changeSpeed = (newValue) => {\r\n        dispatch(setSpeed(newValue));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <SettingsSlider\r\n                defaultValue={gradient.speed}\r\n                label={\"Speed\"}\r\n                min={1}\r\n                max={100}\r\n                step={1}\r\n                onChange={changeSpeed}\r\n                color={gradient.speed > 20 ? \"auto\" : \"red\"}\r\n            />\r\n            <ColorsList />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Blinking;\r\n","import React from \"react\";\r\n\r\nimport Gradient from \"./Gradient\";\r\nimport ImageSlider from \"./ImageSlider\";\r\nimport Radial from \"./Radial\";\r\nimport Dots from \"./Dots\";\r\nimport Blinking from \"./Blinking\";\r\n\r\nconst Modes = [\r\n    {\r\n        name: \"Dots\",\r\n        component: <Dots />,\r\n    },\r\n    {\r\n        name: \"Blinking\",\r\n        component: <Blinking />,\r\n    },\r\n    {\r\n        name: \"Gradient\",\r\n        component: <Gradient />,\r\n    },\r\n    {\r\n        name: \"Image\",\r\n        component: <ImageSlider />,\r\n    },\r\n    {\r\n        name: \"Radial\",\r\n        component: <Radial />,\r\n    },\r\n];\r\n\r\nexport default Modes;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Grid, FormControl, InputLabel, Select, MenuItem } from \"@mui/material\";\r\n\r\nimport { setMode } from \"../../redux/configSlice\";\r\n\r\nimport Modes from \"./modes/modesMenu\";\r\n\r\nconst Mode = () => {\r\n    const config = useSelector((storage) => storage.config);\r\n    const dispatch = useDispatch();\r\n    const changeMode = ({ target }) => dispatch(setMode(target.value));\r\n\r\n    return (\r\n        <>\r\n            <Grid item mb={1}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel>Display mode</InputLabel>\r\n                    <Select value={config.mode} label=\"Display mode\" onChange={changeMode}>\r\n                        {Modes.map((mode) => (\r\n                            <MenuItem key={mode.name} value={mode.name}>\r\n                                {mode.name}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            {Modes.find((mode) => mode.name === config.mode).component}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Mode;\r\n","import React from \"react\";\r\n//import { useSelector, useDispatch } from \"react-redux\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\n\r\nimport Mode from \"./modeSelector\";\r\n\r\nconst SettingsContainer = () => {\r\n    //const config = useSelector((storage) => storage.config);\r\n    //const dispatch = useDispatch();\r\n    return (\r\n        <Grid container spacing={2} sx={{ padding: 2 }}>\r\n            <Grid container justifyContent=\"center\" item mb={-1}>\r\n                <Typography gutterBottom variant=\"h5\">\r\n                    Settings\r\n                </Typography>\r\n            </Grid>\r\n\r\n            <Grid container direction=\"column\" item>\r\n                <Mode />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SettingsContainer;\r\n","import React from \"react\";\r\nimport { Box, Slide } from \"@mui/material\";\r\nimport SettingsContainer from \"./SettingsContainer\";\r\n\r\nconst SettingsOverlay = () => {\r\n    return (\r\n        <Box\r\n            sx={{\r\n                position: \"absolute\",\r\n                top: 7,\r\n                left: 7,\r\n                width: \"100%\",\r\n                maxWidth: 350,\r\n                backgroundColor: \"#101020a0\",\r\n                borderRadius: 3,\r\n            }}\r\n        >\r\n            <SettingsContainer />\r\n        </Box>\r\n    );\r\n};\r\n\r\nconst SettingsRef = React.forwardRef((props, ref) => {\r\n    return (\r\n        <div ref={ref} {...props}>\r\n            <SettingsOverlay />\r\n        </div>\r\n    );\r\n});\r\n\r\nconst AnimatedSettingsOverlay = ({ active }) => {\r\n    return (\r\n        <Slide\r\n            timeout={{ enter: 3e2, exit: 1e3 }}\r\n            easing={{ enter: \"cubic-bezier(0, 0.5, 1, 1)\" }}\r\n            direction=\"right\"\r\n            in={active}\r\n            appear={false}\r\n            mountOnEnter\r\n            unmountOnExit\r\n        >\r\n            <SettingsRef />\r\n        </Slide>\r\n    );\r\n};\r\n\r\nexport { AnimatedSettingsOverlay };\r\nexport default SettingsOverlay;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useWindowSize = () => {\r\n    const [windowSize, setWindowSize] = useState([window.innerWidth, window.innerHeight]);\r\n    useEffect(() => {\r\n        const handleResize = () => setWindowSize([window.innerWidth, window.innerHeight]);\r\n\r\n        window.addEventListener(\"resize\", () => handleResize());\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []);\r\n\r\n    return windowSize;\r\n};\r\n\r\nexport default useWindowSize;\r\n","import { useState, useRef, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst createNewImage = (newUrl) => {\r\n    return new Promise((resolve, reject) => {\r\n        const image = new Image();\r\n        image.src = newUrl;\r\n        image.addEventListener(\"load\", (e) => {\r\n            resolve(image);\r\n        });\r\n    });\r\n};\r\n\r\nlet frameCount = 0;\r\nconst useCanvas = (draw) => {\r\n    const [displayImage, setdisplayImage] = useState(null);\r\n\r\n    const canvasRef = useRef(null);\r\n    const config = useSelector((storage) => storage.config);\r\n    const storage = useSelector((storage) => storage);\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext(\"2d\");\r\n        let animationFrameId;\r\n\r\n        if (config.imageUrl !== null && (displayImage === null || config.imageUrl !== displayImage.src)) {\r\n            createNewImage(config.imageUrl).then((image) => {\r\n                setdisplayImage(image);\r\n            });\r\n        }\r\n\r\n        const render = () => {\r\n            frameCount++;\r\n            draw(context, frameCount, storage, displayImage);\r\n            animationFrameId = window.requestAnimationFrame(render);\r\n        };\r\n        render();\r\n\r\n        return () => {\r\n            window.cancelAnimationFrame(animationFrameId);\r\n        };\r\n    }, [draw, config, displayImage, storage]);\r\n\r\n    return canvasRef;\r\n};\r\n\r\nexport default useCanvas;\r\n","const getRealRadius = (canvas) => {\r\n    return Math.sqrt(canvas.width ** 2 + canvas.height ** 2) / 2;\r\n};\r\n\r\nconst getColorStopWidth = (radius, colors) => {\r\n    return (radius * 2) / colors.length;\r\n};\r\n\r\nconst getRadius = (canvas, colors, mode) => {\r\n    //circumscribed circle around canvas rectangle\r\n    let realRadius = getRealRadius(canvas);\r\n\r\n    //how much space one color takes up\r\n    let colorStopWidth = getColorStopWidth(realRadius, colors);\r\n\r\n    let radius = 0;\r\n    if (mode === \"Blinking\") {\r\n        // set circumscribed circle's radius to a color stop\r\n        radius = realRadius * colorStopWidth;\r\n    } else if (mode === \"Gradient\" || mode === \"Radial\") {\r\n        //increase circumscribed circle's radius by a color stop\r\n        radius = realRadius + colorStopWidth;\r\n    }\r\n\r\n    return radius;\r\n};\r\n\r\nconst getLinearGradient = (context, rotation, radius) => {\r\n    let canvas = context.canvas;\r\n    //calculate location of points on a circle based on rotation\r\n    let x1 = Math.cos(-rotation + Math.PI) * radius + canvas.width / 2;\r\n    let y1 = Math.sin(-rotation + Math.PI) * radius + canvas.height / 2;\r\n    let x2 = Math.cos(-rotation) * radius + canvas.width / 2;\r\n    let y2 = Math.sin(-rotation) * radius + canvas.height / 2;\r\n\r\n    return context.createLinearGradient(x1, y1, x2, y2);\r\n};\r\nconst getSpeed = (frameCount, speed) => (frameCount / speed) * 1.5;\r\n\r\nconst addColorStops = (gradient, speed, colors) => {\r\n    for (let i = 0; i < colors.length; i++) {\r\n        let colorOffset = ((i + speed) % colors.length) / colors.length;\r\n        gradient.addColorStop(colorOffset, colors[i]);\r\n    }\r\n    return gradient;\r\n};\r\n\r\nconst createGradientType = (context, storeGradient, frameCount, mode) => {\r\n    let canvas = context.canvas;\r\n    const radius = getRadius(canvas, storeGradient.colors, mode);\r\n    const gradient = getLinearGradient(context, storeGradient.rotation, radius);\r\n\r\n    return addColorStops(gradient, getSpeed(frameCount, storeGradient.speed), storeGradient.colors);\r\n};\r\n\r\nexport { createGradientType, addColorStops, getSpeed, getRadius };\r\n\r\n/* ------------------------------ */\r\n\r\n/* BROKEN\r\nconst addColorStops = (gradient, speed, colors) => {\r\n    let minOffset = 1;\r\n    let baseColorIndex = null;\r\n\r\n    for (let i = 0; i < colors.length; i++) {\r\n        let colorOffset = ((i + speed) % colors.length) / colors.length;\r\n\r\n        if (colorOffset < minOffset) {\r\n            minOffset = colorOffset;\r\n            baseColorIndex = i;\r\n        }\r\n\r\n        gradient.addColorStop(colorOffset, colors[i]);\r\n    }\r\n    if (baseColorIndex + speed > 0.001) {\r\n        let baseIndex = (baseColorIndex - 1 + colors.length) % colors.length;\r\n        gradient.addColorStop(0, colors[baseIndex]);\r\n    }\r\n    return gradient;\r\n};\r\n*/\r\n\r\n/* ------------------------------ */\r\n","class Vector2 {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    add(vector2) {\r\n        this.x += vector2.x;\r\n        this.y += vector2.y;\r\n    }\r\n\r\n    limit(canvas) {\r\n        this.x = (this.x + canvas.width) % canvas.width;\r\n        this.y = (this.y + canvas.height) % canvas.height;\r\n    }\r\n}\r\n\r\nexport default Vector2;\r\n","import Vector2 from \"./Vector2\";\r\n\r\nclass Dot {\r\n    constructor(x, y, color) {\r\n        this.pos = new Vector2(x, y);\r\n        this.vel = new Vector2(0, 0);\r\n        this.angle = Math.random() * Math.PI * 2;\r\n        this.setVelocity(50);\r\n        this.color = color || \"#000000\";\r\n    }\r\n\r\n    // speed - pixels per second\r\n    setVelocity(speed) {\r\n        speed /= 1000 / 60;\r\n        this.vel.x = speed * Math.cos(this.angle);\r\n        this.vel.y = speed * Math.sin(this.angle);\r\n    }\r\n\r\n    getBezier() {\r\n        return [this.pos.x + 100 * Math.cos(this.angle), this.pos.y + 100 * Math.sin(this.angle)];\r\n    }\r\n\r\n    update(canvas) {\r\n        this.pos.add(this.vel);\r\n        this.pos.limit(canvas);\r\n    }\r\n\r\n    render(context) {\r\n        context.fillStyle = this.color;\r\n\r\n        context.beginPath();\r\n        context.arc(this.pos.x, this.pos.y, 4, 0, 2 * Math.PI);\r\n        context.fill();\r\n    }\r\n}\r\n\r\nfunction hsvToRgb(h, s, v) {\r\n    let r, g, b;\r\n\r\n    let i = Math.floor(h * 6);\r\n    let f = h * 6 - i;\r\n    let p = v * (1 - s);\r\n    let q = v * (1 - f * s);\r\n    let t = v * (1 - (1 - f) * s);\r\n\r\n    switch (i % 6) {\r\n        default:\r\n        case 0: {\r\n            r = v;\r\n            g = t;\r\n            b = p;\r\n            break;\r\n        }\r\n        case 1: {\r\n            r = q;\r\n            g = v;\r\n            b = p;\r\n            break;\r\n        }\r\n        case 2: {\r\n            r = p;\r\n            g = v;\r\n            b = t;\r\n            break;\r\n        }\r\n        case 3: {\r\n            r = p;\r\n            g = q;\r\n            b = v;\r\n            break;\r\n        }\r\n        case 4: {\r\n            r = t;\r\n            g = p;\r\n            b = v;\r\n            break;\r\n        }\r\n        case 5: {\r\n            r = v;\r\n            g = p;\r\n            b = q;\r\n            break;\r\n        }\r\n    }\r\n\r\n    let get = (num) => {\r\n        let res = Math.floor(num).toString(16);\r\n        if (res.length < 2) res = \"0\" + res;\r\n        return res;\r\n    };\r\n\r\n    return \"#\" + get(r * 255) + get(g * 255) + get(b * 255);\r\n}\r\n\r\nconst createDot = (canv) => {\r\n    return new Dot(canv.width * Math.random(), canv.height * Math.random(), hsvToRgb(Math.random(), 1, 1));\r\n};\r\n\r\nexport { createDot };\r\n","import { createDot } from \"./Dots/Dot\";\r\n\r\nlet Dots = [];\r\nlet lastSpeed = 0;\r\n\r\nconst updateCount = (context, dots) => {\r\n    if (Dots.length > dots.count) {\r\n        Dots.length = dots.count;\r\n    } else {\r\n        for (let i = Dots.length; i < dots.count; i++) {\r\n            Dots.push(createDot(context.canvas));\r\n        }\r\n    }\r\n};\r\n\r\nconst Connect = (context, maxDistance, curved) => {\r\n    for (let i = 0; i < Dots.length - 1; i++) {\r\n        let point1 = Dots[i];\r\n        for (let j = i + 1; j < Dots.length; j++) {\r\n            let point2 = Dots[j];\r\n            let distanceSrt = (point2.pos.x - point1.pos.x) ** 2 + (point2.pos.y - point1.pos.y) ** 2;\r\n            if (distanceSrt < maxDistance ** 2) {\r\n                let distance = Math.sqrt(distanceSrt);\r\n                let alpha = Math.floor(255 - (255 * distance) / maxDistance).toString(16);\r\n                if (alpha.length < 2) alpha = \"0\" + alpha;\r\n\r\n                let color = context.createLinearGradient(point1.pos.x, point1.pos.y, point2.pos.x, point2.pos.y);\r\n                color.addColorStop(0, point1.color + alpha);\r\n                color.addColorStop(1, point2.color + alpha);\r\n\r\n                context.strokeStyle = color;\r\n                context.lineWidth = (1 - distance / maxDistance + 0.2) * 4;\r\n                context.lineCap = \"round\";\r\n                context.beginPath();\r\n                context.moveTo(point1.pos.x, point1.pos.y);\r\n                if (curved)\r\n                    context.bezierCurveTo(...point1.getBezier(), ...point2.getBezier(), point2.pos.x, point2.pos.y);\r\n                else context.lineTo(point2.pos.x, point2.pos.y);\r\n                context.stroke();\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst updateDots = (context, dots) => {\r\n    if (Dots.length !== dots.count) updateCount(context, dots);\r\n    if (lastSpeed !== dots.speed) {\r\n        Dots.map((dot) => dot.setVelocity(dots.speed));\r\n        lastSpeed = dots.speed;\r\n    }\r\n    Dots.map((dot) => dot.update(context.canvas));\r\n\r\n    context.fillStyle = \"#000\";\r\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height);\r\n\r\n    context.fillStyle = \"#000000\";\r\n    context.lineWidth = 2;\r\n    Connect(context, dots.maxDistance, dots.curved);\r\n    if (dots.showDots) Dots.map((dot) => dot.render(context));\r\n};\r\n\r\nexport { updateDots };\r\n","import { createGradient } from \"./display modes/gradient\";\r\nimport { createBlinking } from \"./display modes/blinking\";\r\nimport { createRadial } from \"./display modes/radial\";\r\nimport { createImageSlider } from \"./PatternFactory\";\r\n\r\nimport { updateDots } from \"./display modes/dots\";\r\n\r\nconst drawDebug = (context, frameCount) => {\r\n    const canvas = context.canvas;\r\n    let radius = 80;\r\n    context.fillStyle = \"#ffffffa0\";\r\n    context.beginPath();\r\n    context.arc(\r\n        canvas.width - radius - 10,\r\n        canvas.height - radius - 10,\r\n        radius * Math.sin(frameCount * 0.05) ** 2,\r\n        0,\r\n        2 * Math.PI\r\n    );\r\n    context.fill();\r\n};\r\n\r\nconst drawDefault = (context) => {\r\n    const canvas = context.canvas;\r\n    context.fillStyle = \"black\";\r\n    context.fillRect(0, 0, canvas.width, canvas.height);\r\n    context.font = \"48px courier\";\r\n    context.textAlign = \"center\";\r\n    context.fillStyle = \"white\";\r\n    context.fillText(\"No input\", canvas.width / 2, canvas.height / 2);\r\n};\r\n\r\nconst createFillStyle = (context, storage, frameCount, image) => {\r\n    switch (storage.config.mode) {\r\n        case \"Gradient\":\r\n            return createGradient(context, storage.gradient, frameCount);\r\n        case \"Blinking\":\r\n            return createBlinking(context, storage.gradient, frameCount);\r\n        case \"Radial\":\r\n            return createRadial(context, storage.gradient, frameCount);\r\n        case \"Image\": {\r\n            if (image !== null) return createImageSlider(context, image);\r\n            return null;\r\n        }\r\n        default: {\r\n            return null;\r\n        }\r\n    }\r\n};\r\n\r\nconst getDrawType = (mode) => {\r\n    switch (mode) {\r\n        case \"Gradient\":\r\n        case \"Blinking\":\r\n        case \"Radial\":\r\n        case \"Image\": {\r\n            return \"fillstyle\";\r\n        }\r\n\r\n        case \"Dots\": {\r\n            return \"update\";\r\n        }\r\n\r\n        default: {\r\n            return \"unknown\";\r\n        }\r\n    }\r\n};\r\n\r\nconst drawUpdate = (context, storage) => {\r\n    const canvas = context.canvas;\r\n    const type = getDrawType(storage.config.mode);\r\n    if (type === \"fillstyle\") {\r\n        context.fillRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n    if (storage.config.mode === \"Dots\") {\r\n        updateDots(context, storage.dots);\r\n    }\r\n};\r\n\r\nconst CanvasUpdate = (context, frameCount, storage, image) => {\r\n    drawDefault(context);\r\n\r\n    const type = getDrawType(storage.config.mode);\r\n    if (type === \"fillstyle\") {\r\n        let fillStyle = createFillStyle(context, storage, frameCount, image);\r\n        if (fillStyle !== null) {\r\n            context.fillStyle = fillStyle;\r\n            drawUpdate(context, storage);\r\n        }\r\n    }\r\n    if (type === \"update\") {\r\n        drawUpdate(context, storage);\r\n    }\r\n\r\n    if (storage.config.debug) {\r\n        drawDebug(context, frameCount);\r\n    }\r\n};\r\n\r\nexport default CanvasUpdate;\r\n","import { createGradientType } from \"../GradientFactory\";\r\n\r\n//fix: Transition between colors is flickering when there are only few colors\r\nconst createGradient = (context, storeGradient, frameCount) => {\r\n    return createGradientType(context, storeGradient, frameCount, \"Gradient\");\r\n};\r\n\r\nexport { createGradient };\r\n","import { createGradientType } from \"../GradientFactory\";\r\n\r\nconst createBlinking = (context, storeGradient, frameCount) => {\r\n    return createGradientType(context, storeGradient, frameCount, \"Blinking\");\r\n};\r\n\r\nexport { createBlinking };\r\n","import { getRadius, addColorStops, getSpeed } from \"../GradientFactory\";\r\n\r\nconst getRadialGradient = (context, radius) => {\r\n    let canvas = context.canvas;\r\n    return context.createRadialGradient(\r\n        canvas.width / 2,\r\n        canvas.height / 2,\r\n        0,\r\n        canvas.width / 2,\r\n        canvas.height / 2,\r\n        radius\r\n    );\r\n};\r\n\r\nconst createRadial = (context, storeGradient, frameCount) => {\r\n    let canvas = context.canvas;\r\n    const radius = getRadius(canvas, storeGradient.colors, \"Radial\");\r\n    const gradient = getRadialGradient(context, radius);\r\n\r\n    return addColorStops(gradient, getSpeed(frameCount, storeGradient.speed), storeGradient.colors);\r\n};\r\n\r\nexport { createRadial };\r\n","const getImagePattern = (context, image) => {\r\n    let pattern = context.createPattern(image, \"repeat\"); //change repeat to config.repetition pattern\r\n    return pattern;\r\n};\r\n\r\n/* ------------------------------ */\r\n\r\nconst createImageSlider = (context, image) => {\r\n    return getImagePattern(context, image);\r\n};\r\n\r\nexport { createImageSlider };\r\n","import React from \"react\";\r\nimport useWindowSize from \"./windowSize\";\r\n\r\nimport useCanvas from \"./useCanvas\";\r\n\r\nimport CanvasUpdate from \"../drawing/canvasUpdate\";\r\n\r\nconst Canvas = () => {\r\n    const [width, height] = useWindowSize();\r\n    const canvasRef = useCanvas(CanvasUpdate);\r\n\r\n    return <canvas ref={canvasRef} width={width} height={height} />;\r\n};\r\n\r\nexport default Canvas;\r\n","export default __webpack_public_path__ + \"static/media/city.ea63c51b.jpg\";","import React, { useEffect } from \"react\";\r\n\r\nconst useTimer = (callback) => {\r\n    const requestRef = React.useRef();\r\n    const previousTimeRef = React.useRef();\r\n\r\n    useEffect(() => {\r\n        const animate = (time) => {\r\n            if (previousTimeRef.current !== undefined) {\r\n                const deltaTime = time - previousTimeRef.current;\r\n                callback(deltaTime);\r\n            }\r\n            previousTimeRef.current = time;\r\n            requestRef.current = requestAnimationFrame(animate);\r\n        };\r\n\r\n        requestRef.current = requestAnimationFrame(animate);\r\n        return () => cancelAnimationFrame(requestRef.current);\r\n    }, [callback]);\r\n};\r\n\r\nexport default useTimer;\r\n","import React, { useState } from \"react\";\r\nimport useWindowSize from \"./windowSize\";\r\nimport { Box } from \"@mui/system\";\r\n\r\nimport Image from \"../../../content/city.jpg\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useTimer from \"./useTimer\";\r\n\r\nconst ImageDisplay = () => {\r\n    const speed = useSelector((storage) => storage.gradient.speed);\r\n    const [winWidth, winHeight] = useWindowSize();\r\n    const [offset, setOffset] = useState(0);\r\n\r\n    useTimer((dt) => {\r\n        setOffset((prev) => {\r\n            return prev + speed / 500;\r\n        });\r\n    });\r\n\r\n    return (\r\n        <Box\r\n            sx={{\r\n                width: winWidth,\r\n                height: winHeight,\r\n                backgroundImage: `url(${Image})`,\r\n                backgroundSize: \"contain\",\r\n                backgroundPosition: offset + \"%\",\r\n                backgroundRepeat: \"repeat\",\r\n                //transform: \"rotate(20deg)\",\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ImageDisplay;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport Canvas from \"./Canvas\";\r\nimport ImageDisplay from \"./ImageDisplay\";\r\n\r\nconst Display = () => {\r\n    const mode = useSelector((storage) => storage.config.mode);\r\n    if (mode === \"Image\") return <ImageDisplay />;\r\n    return <Canvas />;\r\n};\r\n\r\nexport default Display;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { AnimatedSettingsOverlay } from \"./settings/SettingsOverlay\";\r\nimport Display from \"./display/canvas/Display\";\r\nimport { Checkbox } from \"@mui/material\";\r\n\r\nconst MainContainer = () => {\r\n    const [checked, setCheck] = useState(true);\r\n    return (\r\n        <div>\r\n            <Checkbox\r\n                sx={{\r\n                    position: \"absolute\",\r\n                    bottom: 7,\r\n                    left: 7,\r\n                }}\r\n                checked={checked}\r\n                onChange={({ target }) => setCheck(target.checked)}\r\n            />\r\n            <AnimatedSettingsOverlay active={checked} />\r\n            <Display />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainContainer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\n\nimport { Provider } from \"react-redux\";\nimport storage from \"./redux/store\";\n\nimport MainContainer from \"./components/MainContainer\";\n\nconst theme = createTheme({\n    palette: {\n        mode: \"dark\",\n    },\n    spacing: 8,\n});\n\nconst App = () => {\n    return (\n        <Provider store={storage}>\n            <React.StrictMode>\n                <ThemeProvider theme={theme}>\n                    <CssBaseline />\n\n                    <MainContainer />\n                </ThemeProvider>\n            </React.StrictMode>\n        </Provider>\n    );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}
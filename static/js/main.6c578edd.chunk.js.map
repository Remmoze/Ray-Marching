{"version":3,"sources":["redux/configSlice.jsx","redux/gradientSlice.jsx","redux/dotsSlice.jsx","content/city.jpg","redux/imageSlice.jsx","redux/store.jsx","components/settings/gradient/colorItem.jsx","components/settings/gradient/colorsAdder.jsx","components/settings/components/settingsSlider.jsx","components/settings/modes/Gradient.jsx","components/settings/components/settingsCheckbox.jsx","components/settings/image/imageUpload.jsx","components/settings/modes/Image.jsx","components/settings/modes/Radial.jsx","components/settings/modes/Dots.jsx","components/settings/modes/Blinking.jsx","components/settings/modes/modesMenu.jsx","components/settings/modeSelector.jsx","components/settings/SettingsContainer.jsx","components/settings/SettingsOverlay.jsx","components/display/canvas/windowSize.jsx","components/display/canvas/useCanvas.jsx","components/display/drawing/GradientFactory.jsx","components/display/drawing/display modes/Dots/Vector2.js","components/display/drawing/display modes/Dots/Dot.js","components/display/drawing/display modes/Dots/Grid.js","components/display/drawing/display modes/dots.js","components/display/drawing/display modes/image.js","components/display/drawing/canvasUpdate.jsx","components/display/drawing/display modes/gradient.js","components/display/drawing/display modes/blinking.js","components/display/drawing/display modes/radial.js","components/display/canvas/Canvas.jsx","components/display/canvas/Display.jsx","components/MainContainer.jsx","index.js"],"names":["configSlice","createSlice","name","initialState","debug","mode","reducers","setMode","state","payload","actions","setImageUrl","gradientSlice","speed","rotation","Math","PI","colors","imageUrl","setColors","addColor","push","setColorByIndex","index","color","deleteColorByIndex","splice","setSpeed","setRotation","dotsSlice","count","maxDistance","showDots","curve","showGrid","setCount","setShowDots","setMaxDistance","setCurve","setShowGrid","imageSlice","City","speedX","speedY","scale","setSpeedX","setSpeedY","setScale","rootReducer","combineReducers","config","configReducer","gradient","dots","dotsReducer","image","storage","configureStore","reducer","changeColor","dispatch","setError","strColor","s","Option","style","isColor","ColorItem","blockDelete","useState","error","useDispatch","ListItem","disablePadding","ml","mr","sx","width","height","backgroundColor","border","borderColor","borderRadius","opacity","ListItemText","TextField","onChange","target","value","id","variant","defaultValue","IconButton","disabled","onClick","ColorsList","useSelector","item","mt","container","direction","alignItems","length","floor","random","toString","toUpperCase","List","bgcolor","TransitionGroup","map","Collapse","Divider","SettingsSlider","label","min","max","step","setValue","Slider","e","valueLabelDisplay","Gradient","angle","store","toFixed","SettingsCheckbox","checked","setChecked","Checkbox","Typography","display","ImageUpload","imgURL","setImgURL","uploadInputRef","useRef","ref","type","accept","newImage","files","newUrl","URL","createObjectURL","revokeObjectURL","hidden","Button","current","click","Image","Radial","newValue","Dots","Blinking","Modes","component","Mode","mb","FormControl","fullWidth","InputLabel","Select","MenuItem","find","SettingsContainer","spacing","padding","justifyContent","gutterBottom","SettingsOverlay","Box","position","top","left","maxWidth","SettingsRef","React","forwardRef","props","AnimatedSettingsOverlay","active","Slide","timeout","enter","exit","easing","in","appear","mountOnEnter","unmountOnExit","useWindowSize","window","innerWidth","innerHeight","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","frameCount","useCanvas","draw","displayImage","setdisplayImage","canvasRef","animationFrameId","context","getContext","src","Promise","resolve","reject","then","render","requestAnimationFrame","cancelAnimationFrame","getRadius","canvas","realRadius","sqrt","getRealRadius","colorStopWidth","radius","getColorStopWidth","getSpeed","addColorStops","i","colorOffset","addColorStop","createGradientType","storeGradient","x1","cos","y1","sin","x2","y2","createLinearGradient","getLinearGradient","Vector2","x","y","this","vector2","Dot","pos","vel","setVelocity","add","limit","fillStyle","beginPath","arc","fill","createDot","canv","h","v","r","g","b","f","p","q","t","get","num","res","hsvToRgb","Cell","point","Grid","cells","rows","columns","init","ceil","dot","addDot","cell","console","getCell","indexOf","getCoordsByIndex","xBoundary","yBoundary","j","intersects","grid","connectDots","dot1","dot2","distance","alpha","padStart","strokeStyle","lineWidth","lineCap","connectDotsCurved","connectDotsLine","moveTo","lineTo","stroke","bezierCurveTo","getBezier","lastSpeed","lastDistance","updateProperties","needsUpdate","removeDot","updateCount","populate","updateDots","fillRect","update","strokeRect","neighbours","getCellNeighbours","k","neighbour","z","connectNew","pattern","offsetX","offsetY","scalingX","scalingY","prevURL","updateImage","log","onload","createPattern","updatePattern","setTransform","resetTransform","translate","createFillStyle","createGradient","createBlinking","createRadialGradient","getRadialGradient","createRadial","getDrawType","drawUpdate","prevDimensions","CanvasUpdate","font","textAlign","fillText","drawDefault","drawDebug","Canvas","Display","MainContainer","setCheck","bottom","theme","createTheme","palette","App","StrictMode","ThemeProvider","CssBaseline","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6c578edd.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst configSlice = createSlice({\r\n    name: \"config\",\r\n    initialState: {\r\n        debug: false,\r\n        mode: \"Image\",\r\n    },\r\n    reducers: {\r\n        setMode: (state, { payload }) => {\r\n            state.mode = payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setImageUrl, setMode } = configSlice.actions;\r\n\r\nexport default configSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst gradientSlice = createSlice({\r\n    name: \"gradient\",\r\n    initialState: {\r\n        speed: 100,\r\n        rotation: (Math.PI * 5) / 8, //radians\r\n        colors: [\r\n            \"#FF0000\", // Red\r\n            \"#FFA500\", // Orange\r\n            \"#FFFF00\", // Yellow\r\n            \"#008000\", // Green\r\n            \"#0000FF\", // Blue\r\n            \"#4B0082\", // Indigo\r\n            \"#EE82EE\", // Violet\r\n        ],\r\n        imageUrl: null,\r\n    },\r\n    reducers: {\r\n        /*\r\n            Should add a smooth transition between colors\r\n            https://stackoverflow.com/questions/30196043/how-to-display-a-smoother-gradient-in-html5-canvas\r\n            https://stackoverflow.com/questions/21835739/smooth-color-transition-algorithm\r\n        */\r\n\r\n        setColors: (state, { payload }) => {\r\n            state.colors = payload;\r\n        },\r\n        addColor: (state, { payload }) => {\r\n            state.colors.push(payload);\r\n        },\r\n        setColorByIndex: (state, { payload }) => {\r\n            state.colors[payload.index] = payload.color;\r\n        },\r\n        deleteColorByIndex: (state, { payload }) => {\r\n            state.colors.splice(payload, 1);\r\n        },\r\n        setSpeed: (state, { payload }) => {\r\n            state.speed = payload;\r\n        },\r\n        setRotation: (state, { payload }) => {\r\n            state.rotation = payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setSpeed, setRotation, addColor, setColorByIndex, deleteColorByIndex } = gradientSlice.actions;\r\n\r\nexport default gradientSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst dotsSlice = createSlice({\r\n    name: \"dots\",\r\n    initialState: {\r\n        speed: 50,\r\n        count: 100,\r\n        maxDistance: 120,\r\n        showDots: true,\r\n        curve: 0,\r\n        showGrid: false,\r\n    },\r\n    reducers: {\r\n        setSpeed: (state, { payload }) => {\r\n            state.speed = payload;\r\n        },\r\n        setCount: (state, { payload }) => {\r\n            state.count = payload;\r\n        },\r\n        setShowDots: (state, { payload }) => {\r\n            state.showDots = payload;\r\n        },\r\n        setMaxDistance: (state, { payload }) => {\r\n            state.maxDistance = payload;\r\n        },\r\n        setCurve: (state, { payload }) => {\r\n            state.curve = payload;\r\n        },\r\n        setShowGrid: (state, { payload }) => {\r\n            state.showGrid = payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setSpeed, setCount, setShowDots, setMaxDistance, setCurve, setShowGrid } = dotsSlice.actions;\r\n\r\nexport default dotsSlice.reducer;\r\n","export default __webpack_public_path__ + \"static/media/city.ea63c51b.jpg\";","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport City from \"../content/city.jpg\";\r\n\r\nconst imageSlice = createSlice({\r\n    name: \"image\",\r\n    initialState: {\r\n        imageUrl: City,\r\n        speedX: -3,\r\n        speedY: 0,\r\n        scale: true,\r\n    },\r\n    reducers: {\r\n        setImageUrl: (state, { payload }) => {\r\n            state.imageUrl = payload;\r\n        },\r\n        setSpeedX: (state, { payload }) => {\r\n            state.speedX = payload;\r\n        },\r\n        setSpeedY: (state, { payload }) => {\r\n            state.speedY = payload;\r\n        },\r\n        setScale: (state, { payload }) => {\r\n            state.scale = payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setImageUrl, setSpeedX, setSpeedY, setScale } = imageSlice.actions;\r\n\r\nexport default imageSlice.reducer;\r\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\n\r\nimport configReducer from \"./configSlice\";\r\nimport gradientSlice from \"./gradientSlice\";\r\nimport dotsReducer from \"./dotsSlice\";\r\nimport imageSlice from \"./imageSlice\";\r\n\r\nconst rootReducer = combineReducers({\r\n    config: configReducer,\r\n    gradient: gradientSlice,\r\n    dots: dotsReducer,\r\n    image: imageSlice,\r\n});\r\n\r\nconst storage = configureStore({\r\n    reducer: rootReducer,\r\n});\r\n\r\nexport default storage;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { deleteColorByIndex, setColorByIndex } from \"../../../redux/gradientSlice\";\r\n\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\n\r\nimport { IconButton, TextField } from \"@mui/material\";\r\nimport { ListItem, ListItemText } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\n\r\nconst isColor = (strColor) => {\r\n    const s = new Option().style;\r\n    s.color = strColor;\r\n    return s.color !== \"\";\r\n};\r\n\r\nconst changeColor = (dispatch, index, color, setError) => {\r\n    if (!isColor(color)) {\r\n        setError(true);\r\n        return;\r\n    }\r\n    setError(false);\r\n    dispatch(setColorByIndex({ index, color }));\r\n};\r\n\r\nconst ColorItem = ({ color, index, blockDelete }) => {\r\n    const [error, setError] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ListItem disablePadding>\r\n            <Box\r\n                ml={1}\r\n                mr={1}\r\n                sx={{\r\n                    width: 70,\r\n                    height: 25,\r\n                    backgroundColor: color,\r\n                    border: 2,\r\n                    borderColor: \"#aaaaaa\",\r\n                    borderRadius: 2,\r\n                    \"&:hover\": {\r\n                        backgroundColor: color,\r\n                        opacity: [0.8, 0.8, 0.8],\r\n                    },\r\n                }}\r\n            />\r\n\r\n            <ListItemText>\r\n                <TextField\r\n                    onChange={({ target }) => changeColor(dispatch, index, target.value, setError)}\r\n                    id=\"standard-basic\"\r\n                    variant=\"standard\"\r\n                    color={error ? \"error\" : \"primary\"}\r\n                    defaultValue={color}\r\n                />\r\n            </ListItemText>\r\n            <IconButton\r\n                disabled={blockDelete}\r\n                onClick={() => {\r\n                    dispatch(deleteColorByIndex(index));\r\n                }}\r\n            >\r\n                <DeleteIcon />\r\n            </IconButton>\r\n        </ListItem>\r\n    );\r\n};\r\n\r\nexport default ColorItem;\r\n","import React from \"react\";\r\nimport { TransitionGroup } from \"react-transition-group\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { addColor } from \"../../../redux/gradientSlice\";\r\n\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\n\r\nimport { Grid, IconButton } from \"@mui/material\";\r\nimport { List, Divider } from \"@mui/material\";\r\nimport { Collapse } from \"@mui/material\";\r\n\r\nimport ColorItem from \"./colorItem\";\r\n\r\nconst RandomColor = () => {\r\n    return (\r\n        \"#\" +\r\n        Math.floor(Math.random() * 16777215)\r\n            .toString(16)\r\n            .toUpperCase()\r\n    );\r\n};\r\n\r\nconst ColorsList = () => {\r\n    const gradient = useSelector((storage) => storage.gradient);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Grid item mt={-1}>\r\n            <Grid container direction=\"row\" alignItems=\"center\">\r\n                <Grid item>Colors</Grid>\r\n                <Grid item>\r\n                    <IconButton\r\n                        disabled={gradient.colors.length >= 9}\r\n                        onClick={() => dispatch(addColor(RandomColor()))}\r\n                    >\r\n                        <AddIcon />\r\n                    </IconButton>\r\n                </Grid>\r\n            </Grid>\r\n            <List sx={{ width: \"100%\", bgcolor: \"#00000050\", borderRadius: 3 }}>\r\n                <TransitionGroup>\r\n                    {gradient.colors.map((color, index) => (\r\n                        <Collapse key={color}>\r\n                            {index !== 0 && <Divider />}\r\n                            <ColorItem blockDelete={gradient.colors.length < 2} color={color} index={index}></ColorItem>\r\n                        </Collapse>\r\n                    ))}\r\n                </TransitionGroup>\r\n            </List>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default ColorsList;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Grid, Slider } from \"@mui/material\";\r\n\r\nconst SettingsSlider = ({ defaultValue, label, onChange, min, max, step, color }) => {\r\n    const [value, setValue] = useState(defaultValue);\r\n    return (\r\n        <>\r\n            <Grid item>{label}</Grid>\r\n            <Grid item>\r\n                <Slider\r\n                    sx={{ color }}\r\n                    onChange={(e, value) => {\r\n                        setValue(value);\r\n                        onChange(value);\r\n                    }}\r\n                    defaultValue={value}\r\n                    min={min}\r\n                    max={max}\r\n                    step={step}\r\n                    value={value}\r\n                    valueLabelDisplay=\"off\"\r\n                />\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SettingsSlider;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { setSpeed, setRotation } from \"../../../redux/gradientSlice\";\r\n\r\nimport ColorsList from \"../gradient/colorsAdder\";\r\nimport SettingsSlider from \"../components/settingsSlider\";\r\n\r\nconst getRotationLabel = (angle) => {\r\n    return `${angle.toFixed(2)} rad / ${((angle * 180) / Math.PI).toFixed(2)} degrees`;\r\n};\r\n\r\nconst Gradient = () => {\r\n    const gradient = useSelector((store) => store.gradient);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <>\r\n            <SettingsSlider\r\n                defaultValue={gradient.speed}\r\n                label={\"Speed\"}\r\n                min={1}\r\n                max={100}\r\n                step={1}\r\n                onChange={(value) => dispatch(setSpeed(value))}\r\n                color={gradient.speed > 20 ? \"auto\" : \"red\"}\r\n            />\r\n            <SettingsSlider\r\n                defaultValue={gradient.rotation}\r\n                label={\"Rotation - \" + getRotationLabel(gradient.rotation)}\r\n                min={0}\r\n                max={Math.PI * 2}\r\n                step={0.01}\r\n                onChange={(value) => dispatch(setRotation(value))}\r\n            />\r\n            <ColorsList />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Gradient;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Checkbox, Grid, Typography } from \"@mui/material\";\r\n\r\nconst SettingsCheckbox = ({ defaultValue, label, onChange }) => {\r\n    const [checked, setChecked] = useState(defaultValue);\r\n    return (\r\n        <Grid mt={-1} ml={-1.5} item>\r\n            <Checkbox\r\n                checked={checked}\r\n                onChange={(e, value) => {\r\n                    setChecked(value);\r\n                    onChange(value);\r\n                }}\r\n            />\r\n            <Typography mt={1} sx={{ display: \"inline\" }}>\r\n                {label}\r\n            </Typography>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SettingsCheckbox;\r\n","import React, { useRef, useState } from \"react\";\r\n\r\nimport { Button } from \"@mui/material\";\r\n\r\nconst ImageUpload = ({ onChange }) => {\r\n    const [imgURL, setImgURL] = useState(null);\r\n\r\n    const uploadInputRef = useRef(null);\r\n\r\n    const openDialog = () => {\r\n        uploadInputRef.current && uploadInputRef.current.click();\r\n    };\r\n\r\n    const fileUploaded = ({ target }) => {\r\n        let newImage = target.files[0];\r\n        let newUrl = URL.createObjectURL(newImage);\r\n        if (imgURL !== null) {\r\n            URL.revokeObjectURL(imgURL);\r\n        }\r\n        setImgURL(newUrl);\r\n        onChange(newUrl);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <input ref={uploadInputRef} type=\"file\" accept=\"image/*\" onChange={fileUploaded} hidden />\r\n            <Button onClick={openDialog} variant=\"outlined\">\r\n                Upload image\r\n            </Button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ImageUpload;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { setImageUrl, setSpeedX, setSpeedY, setScale } from \"../../../redux/imageSlice\";\r\n\r\nimport SettingsSlider from \"../components/settingsSlider\";\r\nimport SettingsCheckbox from \"../components/settingsCheckbox\";\r\n\r\nimport ImageUpload from \"../image/imageUpload\";\r\n\r\nconst Image = () => {\r\n    const { speedX, speedY, scale } = useSelector((storage) => storage.image);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <>\r\n            <SettingsSlider\r\n                defaultValue={speedX}\r\n                label={\"SpeedX \" + speedX}\r\n                min={-10}\r\n                max={10}\r\n                step={1}\r\n                onChange={(value) => dispatch(setSpeedX(value))}\r\n            />\r\n            <SettingsSlider\r\n                defaultValue={speedY}\r\n                label={\"SpeedY \" + speedY}\r\n                min={-10}\r\n                max={10}\r\n                step={1}\r\n                onChange={(value) => dispatch(setSpeedY(value))}\r\n            />\r\n            <SettingsCheckbox\r\n                defaultValue={scale}\r\n                label={\"Scale to fit\"}\r\n                onChange={(value) => dispatch(setScale(value))}\r\n            />\r\n            <ImageUpload onChange={(newUrl) => dispatch(setImageUrl(newUrl))} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Image;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { setSpeed } from \"../../../redux/gradientSlice\";\r\n\r\nimport SettingsSlider from \"../components/settingsSlider\";\r\nimport ColorsList from \"../gradient/colorsAdder\";\r\n\r\nconst Radial = () => {\r\n    const gradient = useSelector((store) => store.gradient);\r\n    const dispatch = useDispatch();\r\n\r\n    const changeSpeed = (newValue) => {\r\n        dispatch(setSpeed(newValue));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <SettingsSlider\r\n                defaultValue={gradient.speed}\r\n                label={\"Speed\"}\r\n                min={1}\r\n                max={100}\r\n                step={1}\r\n                onChange={changeSpeed}\r\n                color={gradient.speed > 20 ? \"auto\" : \"red\"}\r\n            />\r\n            <ColorsList />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Radial;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { setCount, setShowDots, setSpeed, setMaxDistance, setCurve, setShowGrid } from \"../../../redux/dotsSlice\";\r\n\r\nimport SettingsSlider from \"../components/settingsSlider\";\r\nimport SettingsCheckbox from \"../components/settingsCheckbox\";\r\n\r\nconst Dots = () => {\r\n    const dots = useSelector((storage) => storage.dots);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <>\r\n            <SettingsSlider\r\n                defaultValue={dots.speed}\r\n                label={\"Speed - \" + dots.speed + \" pixels/s\"}\r\n                min={1}\r\n                max={50}\r\n                step={1}\r\n                onChange={(value) => dispatch(setSpeed(value))}\r\n            />\r\n            <SettingsSlider\r\n                defaultValue={dots.count}\r\n                label={\"Count - \" + dots.count}\r\n                min={0}\r\n                max={250}\r\n                step={1}\r\n                onChange={(value) => dispatch(setCount(value))}\r\n            />\r\n            <SettingsSlider\r\n                defaultValue={dots.maxDistance}\r\n                label={\"Max distance - \" + dots.maxDistance + \" pixels\"}\r\n                min={100}\r\n                max={200}\r\n                step={1}\r\n                onChange={(value) => dispatch(setMaxDistance(value))}\r\n            />\r\n            <SettingsSlider\r\n                defaultValue={dots.curve}\r\n                label={\"Curvature\"}\r\n                min={0}\r\n                max={300}\r\n                step={1}\r\n                onChange={(value) => dispatch(setCurve(value))}\r\n            />\r\n            <SettingsCheckbox\r\n                defaultValue={dots.showDots}\r\n                label={\"Show Dots\"}\r\n                onChange={(value) => dispatch(setShowDots(value))}\r\n            />\r\n            <SettingsCheckbox\r\n                defaultValue={dots.showGrid}\r\n                label={\"Show Grid\"}\r\n                onChange={(value) => dispatch(setShowGrid(value))}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Dots;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { setSpeed } from \"../../../redux/gradientSlice\";\r\n\r\nimport ColorsList from \"../gradient/colorsAdder\";\r\nimport SettingsSlider from \"../components/settingsSlider\";\r\n\r\nconst Blinking = () => {\r\n    const gradient = useSelector((store) => store.gradient);\r\n    const dispatch = useDispatch();\r\n\r\n    const changeSpeed = (newValue) => {\r\n        dispatch(setSpeed(newValue));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <SettingsSlider\r\n                defaultValue={gradient.speed}\r\n                label={\"Speed\"}\r\n                min={1}\r\n                max={100}\r\n                step={1}\r\n                onChange={changeSpeed}\r\n                color={gradient.speed > 20 ? \"auto\" : \"red\"}\r\n            />\r\n            <ColorsList />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Blinking;\r\n","import Gradient from \"./Gradient\";\r\nimport Image from \"./Image\";\r\nimport Radial from \"./Radial\";\r\nimport Dots from \"./Dots\";\r\nimport Blinking from \"./Blinking\";\r\n\r\nconst Modes = [\r\n    {\r\n        name: \"Dots\",\r\n        component: <Dots />,\r\n    },\r\n    {\r\n        name: \"Blinking\",\r\n        component: <Blinking />,\r\n    },\r\n    {\r\n        name: \"Gradient\",\r\n        component: <Gradient />,\r\n    },\r\n    {\r\n        name: \"Image\",\r\n        component: <Image />,\r\n    },\r\n    {\r\n        name: \"Radial\",\r\n        component: <Radial />,\r\n    },\r\n];\r\n\r\nexport default Modes;\r\n","import React from \"react\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setMode } from \"../../redux/configSlice\";\r\n\r\nimport { Grid, FormControl, InputLabel, Select, MenuItem } from \"@mui/material\";\r\n\r\nimport Modes from \"./modes/modesMenu\";\r\n\r\nconst Mode = () => {\r\n    const config = useSelector((storage) => storage.config);\r\n    const dispatch = useDispatch();\r\n    const changeMode = ({ target }) => dispatch(setMode(target.value));\r\n\r\n    return (\r\n        <>\r\n            <Grid item mb={1}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel>Display mode</InputLabel>\r\n                    <Select value={config.mode} label=\"Display mode\" onChange={changeMode}>\r\n                        {Modes.map((mode) => (\r\n                            <MenuItem key={mode.name} value={mode.name}>\r\n                                {mode.name}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            {Modes.find((mode) => mode.name === config.mode).component}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Mode;\r\n","import React from \"react\";\r\n\r\nimport { Grid, Typography } from \"@mui/material\";\r\n\r\nimport Mode from \"./modeSelector\";\r\n\r\nconst SettingsContainer = () => {\r\n    return (\r\n        <Grid container spacing={2} sx={{ padding: 2 }}>\r\n            <Grid container justifyContent=\"center\" item mb={-1}>\r\n                <Typography gutterBottom variant=\"h5\">\r\n                    Settings\r\n                </Typography>\r\n            </Grid>\r\n\r\n            <Grid container direction=\"column\" item>\r\n                <Mode />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SettingsContainer;\r\n","import React from \"react\";\r\nimport { Box, Slide } from \"@mui/material\";\r\n\r\nimport SettingsContainer from \"./SettingsContainer\";\r\n\r\nconst SettingsOverlay = () => {\r\n    return (\r\n        <Box\r\n            sx={{\r\n                position: \"absolute\",\r\n                top: 7,\r\n                left: 7,\r\n                width: \"100%\",\r\n                maxWidth: 350,\r\n                backgroundColor: \"#101020a0\",\r\n                borderRadius: 3,\r\n            }}\r\n        >\r\n            <SettingsContainer />\r\n        </Box>\r\n    );\r\n};\r\n\r\nconst SettingsRef = React.forwardRef((props, ref) => {\r\n    return (\r\n        <div ref={ref} {...props}>\r\n            <SettingsOverlay />\r\n        </div>\r\n    );\r\n});\r\n\r\nconst AnimatedSettingsOverlay = ({ active }) => {\r\n    return (\r\n        <Slide\r\n            timeout={{ enter: 3e2, exit: 1e3 }}\r\n            easing={{ enter: \"cubic-bezier(0, 0.5, 1, 1)\" }}\r\n            direction=\"right\"\r\n            in={active}\r\n            appear={false}\r\n            mountOnEnter\r\n            unmountOnExit\r\n        >\r\n            <SettingsRef />\r\n        </Slide>\r\n    );\r\n};\r\n\r\nexport { AnimatedSettingsOverlay };\r\nexport default SettingsOverlay;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useWindowSize = () => {\r\n    const [windowSize, setWindowSize] = useState([window.innerWidth, window.innerHeight]);\r\n    useEffect(() => {\r\n        const handleResize = () => setWindowSize([window.innerWidth, window.innerHeight]);\r\n\r\n        window.addEventListener(\"resize\", () => handleResize());\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []);\r\n\r\n    return windowSize;\r\n};\r\n\r\nexport default useWindowSize;\r\n","import { useState, useRef, useEffect } from \"react\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst createNewImage = (newUrl) => {\r\n    return new Promise((resolve, reject) => {\r\n        const image = new Image();\r\n        image.src = newUrl;\r\n        image.addEventListener(\"load\", (e) => {\r\n            resolve(image);\r\n        });\r\n    });\r\n};\r\n\r\nlet frameCount = 0;\r\nconst useCanvas = (draw) => {\r\n    const [displayImage, setdisplayImage] = useState(null);\r\n\r\n    const canvasRef = useRef(null);\r\n    const config = useSelector((storage) => storage.config);\r\n    const storage = useSelector((storage) => storage);\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext(\"2d\");\r\n        let animationFrameId;\r\n\r\n        if (config.imageUrl !== null && (displayImage === null || config.imageUrl !== displayImage.src)) {\r\n            createNewImage(config.imageUrl).then((image) => {\r\n                setdisplayImage(image);\r\n            });\r\n        }\r\n\r\n        const render = () => {\r\n            frameCount++;\r\n            draw(context, frameCount, storage, displayImage);\r\n            animationFrameId = window.requestAnimationFrame(render);\r\n        };\r\n        render();\r\n\r\n        return () => {\r\n            window.cancelAnimationFrame(animationFrameId);\r\n        };\r\n    }, [draw, config, displayImage, storage]);\r\n\r\n    return canvasRef;\r\n};\r\n\r\nexport default useCanvas;\r\n","const getRealRadius = (canvas) => {\r\n    return Math.sqrt(canvas.width ** 2 + canvas.height ** 2) / 2;\r\n};\r\n\r\nconst getColorStopWidth = (radius, colors) => {\r\n    return (radius * 2) / colors.length;\r\n};\r\n\r\nconst getRadius = (canvas, colors, mode) => {\r\n    //circumscribed circle around canvas rectangle\r\n    let realRadius = getRealRadius(canvas);\r\n\r\n    //how much space one color takes up\r\n    let colorStopWidth = getColorStopWidth(realRadius, colors);\r\n\r\n    let radius = 0;\r\n    if (mode === \"Blinking\") {\r\n        // set circumscribed circle's radius to a color stop\r\n        radius = realRadius * colorStopWidth;\r\n    } else if (mode === \"Gradient\" || mode === \"Radial\") {\r\n        //increase circumscribed circle's radius by a color stop\r\n        radius = realRadius + colorStopWidth;\r\n    }\r\n\r\n    return radius;\r\n};\r\n\r\nconst getLinearGradient = (context, rotation, radius) => {\r\n    let canvas = context.canvas;\r\n    //calculate location of points on a circle based on rotation\r\n    let x1 = Math.cos(-rotation + Math.PI) * radius + canvas.width / 2;\r\n    let y1 = Math.sin(-rotation + Math.PI) * radius + canvas.height / 2;\r\n    let x2 = Math.cos(-rotation) * radius + canvas.width / 2;\r\n    let y2 = Math.sin(-rotation) * radius + canvas.height / 2;\r\n\r\n    return context.createLinearGradient(x1, y1, x2, y2);\r\n};\r\nconst getSpeed = (frameCount, speed) => (frameCount / speed) * 1.5;\r\n\r\nconst addColorStops = (gradient, speed, colors) => {\r\n    for (let i = 0; i < colors.length; i++) {\r\n        let colorOffset = ((i + speed) % colors.length) / colors.length;\r\n        gradient.addColorStop(colorOffset, colors[i]);\r\n    }\r\n    return gradient;\r\n};\r\n\r\nconst createGradientType = (context, storeGradient, frameCount, mode) => {\r\n    let canvas = context.canvas;\r\n    const radius = getRadius(canvas, storeGradient.colors, mode);\r\n    const gradient = getLinearGradient(context, storeGradient.rotation, radius);\r\n    let speed = getSpeed(frameCount, storeGradient.speed);\r\n\r\n    return addColorStops(gradient, speed, storeGradient.colors);\r\n};\r\n\r\nexport { createGradientType, addColorStops, getSpeed, getRadius };\r\n\r\n/* ------------------------------ */\r\n\r\n/* BROKEN\r\nconst addColorStops = (gradient, speed, colors) => {\r\n    let minOffset = 1;\r\n    let baseColorIndex = null;\r\n\r\n    for (let i = 0; i < colors.length; i++) {\r\n        let colorOffset = ((i + speed) % colors.length) / colors.length;\r\n\r\n        if (colorOffset < minOffset) {\r\n            minOffset = colorOffset;\r\n            baseColorIndex = i;\r\n        }\r\n\r\n        gradient.addColorStop(colorOffset, colors[i]);\r\n    }\r\n    if (baseColorIndex + speed > 0.001) {\r\n        let baseIndex = (baseColorIndex - 1 + colors.length) % colors.length;\r\n        gradient.addColorStop(0, colors[baseIndex]);\r\n    }\r\n    return gradient;\r\n};\r\n*/\r\n\r\n/* ------------------------------ */\r\n","class Vector2 {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    add(vector2) {\r\n        this.x += vector2.x;\r\n        this.y += vector2.y;\r\n    }\r\n\r\n    limit(canvas) {\r\n        this.x = (this.x + canvas.width) % canvas.width;\r\n        this.y = (this.y + canvas.height) % canvas.height;\r\n    }\r\n}\r\n\r\nexport default Vector2;\r\n","import Vector2 from \"./Vector2\";\r\n\r\nclass Dot {\r\n    constructor(x, y, color) {\r\n        this.pos = new Vector2(x, y);\r\n        this.vel = new Vector2(0, 0);\r\n\r\n        this.angle = Math.random() * Math.PI * 2;\r\n\r\n        this.setVelocity(50);\r\n        this.color = color || \"#000000\";\r\n    }\r\n\r\n    // speed - pixels per second\r\n    setVelocity(speed) {\r\n        speed /= 1000 / 60;\r\n        this.vel.x = speed * Math.cos(this.angle);\r\n        this.vel.y = speed * Math.sin(this.angle);\r\n    }\r\n\r\n    getBezier(curve) {\r\n        let x = this.pos.x + curve * Math.cos(this.angle);\r\n        let y = this.pos.y + curve * Math.sin(this.angle);\r\n        return [x, y];\r\n    }\r\n\r\n    update(canvas) {\r\n        this.pos.add(this.vel);\r\n        this.pos.limit(canvas);\r\n    }\r\n\r\n    render(context) {\r\n        context.fillStyle = this.color;\r\n\r\n        context.beginPath();\r\n        context.arc(this.pos.x, this.pos.y, 4, 0, 2 * Math.PI);\r\n        context.fill();\r\n    }\r\n}\r\n\r\nfunction hsvToRgb(h, s, v) {\r\n    let r, g, b;\r\n\r\n    let i = Math.floor(h * 6);\r\n    let f = h * 6 - i;\r\n    let p = v * (1 - s);\r\n    let q = v * (1 - f * s);\r\n    let t = v * (1 - (1 - f) * s);\r\n\r\n    switch (i % 6) {\r\n        default:\r\n        case 0: {\r\n            r = v;\r\n            g = t;\r\n            b = p;\r\n            break;\r\n        }\r\n        case 1: {\r\n            r = q;\r\n            g = v;\r\n            b = p;\r\n            break;\r\n        }\r\n        case 2: {\r\n            r = p;\r\n            g = v;\r\n            b = t;\r\n            break;\r\n        }\r\n        case 3: {\r\n            r = p;\r\n            g = q;\r\n            b = v;\r\n            break;\r\n        }\r\n        case 4: {\r\n            r = t;\r\n            g = p;\r\n            b = v;\r\n            break;\r\n        }\r\n        case 5: {\r\n            r = v;\r\n            g = p;\r\n            b = q;\r\n            break;\r\n        }\r\n    }\r\n\r\n    let get = (num) => {\r\n        let res = Math.floor(num).toString(16);\r\n        if (res.length < 2) res = \"0\" + res;\r\n        return res;\r\n    };\r\n\r\n    return \"#\" + get(r * 255) + get(g * 255) + get(b * 255);\r\n}\r\n\r\nconst createDot = (canv) => {\r\n    return new Dot(canv.width * Math.random(), canv.height * Math.random(), hsvToRgb(Math.random(), 1, 1));\r\n};\r\n\r\nexport { createDot };\r\n","class Cell {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.dots = [];\r\n    }\r\n\r\n    intersects(point) {\r\n        return (\r\n            point.x >= this.x && point.y >= this.y && point.x < this.x + this.width && point.y < this.y + this.height\r\n        );\r\n    }\r\n}\r\n\r\nclass Grid {\r\n    constructor(canvas, maxDistance) {\r\n        this.cells = [];\r\n        this.maxDistance = (maxDistance / 1.5) * Math.sqrt(2);\r\n\r\n        this.rows = 0;\r\n        this.columns = 0;\r\n\r\n        this.init(canvas);\r\n    }\r\n\r\n    init(canvas) {\r\n        this.cells = [];\r\n        this.columns = Math.ceil(canvas.width / this.maxDistance); // X\r\n        this.rows = Math.ceil(canvas.height / this.maxDistance); // Y\r\n        for (let i = 0; i < this.rows * this.columns; i++) {\r\n            let x = (i % this.columns) * this.maxDistance;\r\n            let y = Math.floor(i / this.columns) * this.maxDistance;\r\n            let width = Math.min(x + this.maxDistance, canvas.width) - x;\r\n            let height = Math.min(y + this.maxDistance, canvas.height) - y;\r\n            this.cells.push(new Cell(x, y, width, height));\r\n        }\r\n    }\r\n\r\n    populate(dots) {\r\n        for (const dot of dots) {\r\n            this.addDot(dot);\r\n        }\r\n    }\r\n\r\n    addDot(dot) {\r\n        let x = Math.floor(dot.pos.x / this.maxDistance);\r\n        let y = Math.floor(dot.pos.y / this.maxDistance);\r\n        let cell = this.cells[y * this.columns + x];\r\n        if (!cell) {\r\n            console.error(\"Dot did not get populated. Could not find a cell.\", dot, y, x);\r\n        } else {\r\n            cell.dots.push(dot);\r\n        }\r\n    }\r\n\r\n    removeDot(dot) {\r\n        let cell = this.getCell(Math.floor(dot.pos.x / this.maxDistance), Math.floor(dot.pos.y / this.maxDistance));\r\n        cell.dots.splice(cell.dots.indexOf(dot), 1);\r\n    }\r\n\r\n    getCell(x, y) {\r\n        return this.cells[y * this.columns + x];\r\n    }\r\n\r\n    getCoordsByIndex(index) {\r\n        return { x: index % this.columns, y: Math.floor(index / this.columns) };\r\n    }\r\n\r\n    getCellNeighbours(index) {\r\n        /*\r\n            [ ][ ][*]\r\n            [ ][x][*]\r\n            [ ][*][*]\r\n        */\r\n        let { x, y } = this.getCoordsByIndex(index);\r\n        let cells = [];\r\n        let xBoundary = x + 1 < this.columns;\r\n        let yBoundary = y + 1 < this.rows;\r\n        if (xBoundary) {\r\n            cells.push(this.getCell(x + 1, y));\r\n            if (y > 0) cells.push(this.getCell(x + 1, y - 1));\r\n        }\r\n        if (yBoundary) {\r\n            cells.push(this.getCell(x, y + 1));\r\n        }\r\n        if (xBoundary && yBoundary) {\r\n            cells.push(this.getCell(x + 1, y + 1));\r\n        }\r\n        return cells;\r\n    }\r\n\r\n    update() {\r\n        for (let i = 0; i < this.cells.length; i++) {\r\n            let cell = this.cells[i];\r\n\r\n            for (let j = 0; j < cell.dots.length; j++) {\r\n                let dot = cell.dots[j];\r\n                if (!cell.intersects(dot.pos)) {\r\n                    cell.dots.splice(cell.dots.indexOf(dot), 1);\r\n                    this.addDot(dot);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Grid;\r\n","import { createDot } from \"./Dots/Dot\";\r\nimport Grid from \"./Dots/Grid\";\r\n\r\nlet Dots = [];\r\nlet grid = null;\r\n\r\nconst updateCount = (context, dots) => {\r\n    if (Dots.length > dots.count) {\r\n        for (let i = Dots.length - 1; i > dots.count - 1; i--) {\r\n            grid.removeDot(Dots[i]);\r\n        }\r\n        Dots.length = dots.count;\r\n    } else {\r\n        for (let i = Dots.length; i < dots.count; i++) {\r\n            const dot = createDot(context.canvas);\r\n            Dots.push(dot);\r\n            if (grid !== null) grid.addDot(dot);\r\n        }\r\n    }\r\n};\r\n\r\nconst connectDots = (context, dot1, dot2, maxDistance, curve) => {\r\n    let distance = Math.sqrt((dot2.pos.x - dot1.pos.x) ** 2 + (dot2.pos.y - dot1.pos.y) ** 2);\r\n\r\n    if (distance > maxDistance) {\r\n        /*\r\n            I have been debugging for hours.\r\n            I have no clue why or how.\r\n            But sometimes. Very very rarely.\r\n            When point jumps across the screen.\r\n            It's position is clearly on the other side of the screen.\r\n            But it is contained within previous cell.\r\n            I have no idea how it is possible. Because points update their location\r\n            and then cells check if all dots are still within their boundaries.\r\n            But it happens. Fixes itself next render.\r\n            I want to cry now.\r\n        */\r\n        return;\r\n    }\r\n\r\n    let alpha = Math.floor(255 - (255 * distance) / maxDistance)\r\n        .toString(16)\r\n        .padStart(2, \"0\");\r\n    let color = context.createLinearGradient(dot1.pos.x, dot1.pos.y, dot2.pos.x, dot2.pos.y);\r\n    color.addColorStop(0, dot1.color + alpha);\r\n    color.addColorStop(1, dot2.color + alpha);\r\n    context.strokeStyle = color;\r\n    context.lineWidth = (1 - distance / maxDistance + 0.2) * 4;\r\n    context.lineCap = \"round\";\r\n    if (curve) {\r\n        connectDotsCurved(context, dot1, dot2, distance, maxDistance, curve);\r\n    } else {\r\n        connectDotsLine(context, dot1, dot2);\r\n    }\r\n};\r\n\r\nconst connectDotsLine = (context, dot1, dot2) => {\r\n    context.beginPath();\r\n    context.moveTo(dot1.pos.x, dot1.pos.y);\r\n    context.lineTo(dot2.pos.x, dot2.pos.y);\r\n    context.stroke();\r\n};\r\n\r\nconst connectDotsCurved = (context, dot1, dot2, distance, maxDistance, curve) => {\r\n    context.beginPath();\r\n    context.moveTo(dot1.pos.x, dot1.pos.y);\r\n    context.bezierCurveTo(\r\n        ...dot1.getBezier((distance / maxDistance) * curve),\r\n        ...dot2.getBezier((distance / maxDistance) * curve),\r\n        dot2.pos.x,\r\n        dot2.pos.y\r\n    );\r\n    context.stroke();\r\n};\r\n\r\nconst connectNew = (context, maxDistance, curve) => {\r\n    for (let i = 0; i < grid.cells.length; i++) {\r\n        const cell = grid.cells[i];\r\n        const neighbours = grid.getCellNeighbours(i);\r\n\r\n        for (let j = 0; j < cell.dots.length; j++) {\r\n            let dot1 = cell.dots[j];\r\n            // within itself\r\n            for (let k = j; k < cell.dots.length; k++) {\r\n                let dot2 = cell.dots[k];\r\n                connectDots(context, dot1, dot2, maxDistance, curve);\r\n            }\r\n\r\n            // outside itself\r\n            for (let k = 0; k < neighbours.length; k++) {\r\n                let neighbour = neighbours[k];\r\n                for (let z = 0; z < neighbour.dots.length; z++) {\r\n                    let dot2 = neighbour.dots[z];\r\n                    connectDots(context, dot1, dot2, maxDistance, curve);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nlet lastSpeed = 0;\r\nlet lastDistance = 0;\r\nconst updateProperties = (context, dots, needsUpdate) => {\r\n    if (Dots.length !== dots.count) {\r\n        updateCount(context, dots);\r\n    }\r\n\r\n    if (lastSpeed !== dots.speed) {\r\n        Dots.map((dot) => dot.setVelocity(dots.speed));\r\n        lastSpeed = dots.speed;\r\n    }\r\n\r\n    if (needsUpdate || lastDistance !== dots.maxDistance) {\r\n        grid = new Grid(context.canvas, dots.maxDistance);\r\n        grid.populate(Dots);\r\n        lastDistance = dots.maxDistance;\r\n    }\r\n};\r\n\r\nconst updateDots = (context, dots, needsUpdate) => {\r\n    updateProperties(context, dots, needsUpdate);\r\n\r\n    context.fillStyle = \"#000\";\r\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height);\r\n\r\n    //dots\r\n    for (const dot of Dots) {\r\n        dot.update(context.canvas);\r\n        if (dots.showDots) dot.render(context);\r\n    }\r\n\r\n    grid.update();\r\n\r\n    //grid\r\n    if (dots.showGrid) {\r\n        for (let i = 0; i < grid.cells.length; i++) {\r\n            let { x, y, width, height } = grid.cells[i];\r\n            context.lineWidth = 2;\r\n            context.strokeStyle = \"red\";\r\n            context.strokeRect(x, y, width, height);\r\n        }\r\n    }\r\n\r\n    //lines\r\n    context.fillStyle = \"#000000\";\r\n    context.lineWidth = 2;\r\n    connectNew(context, dots.maxDistance, dots.curve);\r\n};\r\n\r\nexport { updateDots };\r\n","let pattern = null;\r\nconst updatePattern = (context, image) => {\r\n    console.log(\"new pattern\");\r\n    pattern = context.createPattern(image, \"repeat\");\r\n};\r\n\r\nlet image = new Image();\r\n\r\nlet offsetX = 0;\r\nlet offsetY = 0;\r\n\r\nlet scalingX = 1;\r\nlet scalingY = 1;\r\n\r\nconst draw = (context, { speedX, speedY, scale }) => {\r\n    context.fillStyle = \"black\";\r\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height);\r\n    context.fillStyle = pattern;\r\n\r\n    if (speedX) {\r\n        offsetX += speedX;\r\n        //offsetX %= context.canvas.width;\r\n    }\r\n    if (speedY) {\r\n        offsetY += speedY;\r\n        //offsetY %= context.canvas.height;\r\n    }\r\n\r\n    if (scale) {\r\n        if (context.canvas.width <= image.width) {\r\n            scalingX = 1;\r\n        } else {\r\n            scalingX = context.canvas.width / image.width;\r\n        }\r\n        if (context.canvas.height <= image.height) {\r\n            scalingY = 1;\r\n        } else {\r\n            scalingY = context.canvas.height / image.height;\r\n        }\r\n        context.setTransform(scalingX, 0, 0, scalingY, offsetX, offsetY);\r\n        context.fillRect(-offsetX / scalingX, -offsetY / scalingY, context.canvas.width, context.canvas.height);\r\n        context.resetTransform();\r\n    } else {\r\n        context.translate(offsetX, offsetY);\r\n        context.fillRect(-offsetX, -offsetY, context.canvas.width, context.canvas.height);\r\n        context.translate(-offsetX, -offsetY);\r\n    }\r\n};\r\n\r\nlet prevURL = \"\";\r\nconst updateImage = (context, { imageUrl, speedX, speedY, scale }) => {\r\n    if (imageUrl !== prevURL) {\r\n        console.log(\"was here\", imageUrl);\r\n        // code\r\n        image = new Image(); // could be removed?\r\n        image.onload = () => {\r\n            updatePattern(context, image);\r\n        };\r\n        image.src = imageUrl;\r\n        prevURL = imageUrl;\r\n    }\r\n\r\n    if (pattern !== null) {\r\n        draw(context, { speedX, speedY, scale });\r\n    }\r\n};\r\n\r\nexport { updateImage };\r\n","import { createGradient } from \"./display modes/gradient\";\r\nimport { createBlinking } from \"./display modes/blinking\";\r\nimport { createRadial } from \"./display modes/radial\";\r\nimport { updateDots } from \"./display modes/dots\";\r\nimport { updateImage } from \"./display modes/image\";\r\n\r\nconst drawDebug = (context, frameCount) => {\r\n    const canvas = context.canvas;\r\n    let radius = 80;\r\n    context.fillStyle = \"#ffffffa0\";\r\n    context.beginPath();\r\n    context.arc(\r\n        canvas.width - radius - 10,\r\n        canvas.height - radius - 10,\r\n        radius * Math.sin(frameCount * 0.05) ** 2,\r\n        0,\r\n        2 * Math.PI\r\n    );\r\n    context.fill();\r\n};\r\n\r\nconst drawDefault = (context) => {\r\n    const canvas = context.canvas;\r\n    context.fillStyle = \"black\";\r\n    context.fillRect(0, 0, canvas.width, canvas.height);\r\n    context.font = \"48px courier\";\r\n    context.textAlign = \"center\";\r\n    context.fillStyle = \"white\";\r\n    context.fillText(\"No input\", canvas.width / 2, canvas.height / 2);\r\n};\r\n\r\nconst createFillStyle = (context, storage, frameCount, image) => {\r\n    switch (storage.config.mode) {\r\n        case \"Gradient\":\r\n            return createGradient(context, storage.gradient, frameCount);\r\n        case \"Blinking\":\r\n            return createBlinking(context, storage.gradient, frameCount);\r\n        case \"Radial\":\r\n            return createRadial(context, storage.gradient, frameCount);\r\n        default: {\r\n            return null;\r\n        }\r\n    }\r\n};\r\n\r\nconst getDrawType = (mode) => {\r\n    switch (mode) {\r\n        case \"Gradient\":\r\n        case \"Blinking\":\r\n        case \"Radial\": {\r\n            return \"fillstyle\";\r\n        }\r\n\r\n        case \"Image\": {\r\n            return \"pattern\";\r\n        }\r\n\r\n        case \"Dots\": {\r\n            return \"update\";\r\n        }\r\n\r\n        default: {\r\n            return \"unknown\";\r\n        }\r\n    }\r\n};\r\n\r\nconst drawUpdate = (context, storage, needsUpdate = false) => {\r\n    const canvas = context.canvas;\r\n    const type = getDrawType(storage.config.mode);\r\n    if (type === \"fillstyle\") {\r\n        context.fillRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n    if (storage.config.mode === \"Dots\") {\r\n        updateDots(context, storage.dots, needsUpdate);\r\n    }\r\n\r\n    if (storage.config.mode === \"Image\") {\r\n        updateImage(context, storage.image);\r\n    }\r\n};\r\n\r\nlet prevDimensions = { width: 0, height: 0 };\r\nconst CanvasUpdate = (context, frameCount, storage, image) => {\r\n    let needsUpdate = context.canvas.width !== prevDimensions.width || context.canvas.height !== prevDimensions.height;\r\n    if (needsUpdate) {\r\n        prevDimensions.width = context.canvas.width;\r\n        prevDimensions.height = context.canvas.height;\r\n    }\r\n    drawDefault(context);\r\n\r\n    const type = getDrawType(storage.config.mode);\r\n    if (type === \"fillstyle\") {\r\n        let fillStyle = createFillStyle(context, storage, frameCount, image);\r\n        if (fillStyle !== null) {\r\n            context.fillStyle = fillStyle;\r\n            drawUpdate(context, storage);\r\n        }\r\n    } else if (type === \"update\") {\r\n        drawUpdate(context, storage, needsUpdate);\r\n    } else if (type === \"pattern\") {\r\n        drawUpdate(context, storage);\r\n    }\r\n\r\n    if (storage.config.debug) {\r\n        drawDebug(context, frameCount);\r\n    }\r\n};\r\n\r\nexport default CanvasUpdate;\r\n","import { createGradientType } from \"../GradientFactory\";\r\n\r\n//fix: Transition between colors is flickering when there are only few colors\r\nconst createGradient = (context, storeGradient, frameCount) => {\r\n    return createGradientType(context, storeGradient, frameCount, \"Gradient\");\r\n};\r\n\r\nexport { createGradient };\r\n","import { createGradientType } from \"../GradientFactory\";\r\n\r\nconst createBlinking = (context, storeGradient, frameCount) => {\r\n    return createGradientType(context, storeGradient, frameCount, \"Blinking\");\r\n};\r\n\r\nexport { createBlinking };\r\n","import { getRadius, addColorStops, getSpeed } from \"../GradientFactory\";\r\n\r\nconst getRadialGradient = (context, radius) => {\r\n    let canvas = context.canvas;\r\n    return context.createRadialGradient(\r\n        canvas.width / 2,\r\n        canvas.height / 2,\r\n        0,\r\n        canvas.width / 2,\r\n        canvas.height / 2,\r\n        radius\r\n    );\r\n};\r\n\r\nconst createRadial = (context, storeGradient, frameCount) => {\r\n    let canvas = context.canvas;\r\n    const radius = getRadius(canvas, storeGradient.colors, \"Radial\");\r\n    const gradient = getRadialGradient(context, radius);\r\n\r\n    return addColorStops(gradient, getSpeed(frameCount, storeGradient.speed), storeGradient.colors);\r\n};\r\n\r\nexport { createRadial };\r\n","import React from \"react\";\r\n\r\nimport useWindowSize from \"./windowSize\";\r\nimport useCanvas from \"./useCanvas\";\r\nimport CanvasUpdate from \"../drawing/canvasUpdate\";\r\n\r\nconst Canvas = () => {\r\n    const [width, height] = useWindowSize();\r\n    const canvasRef = useCanvas(CanvasUpdate);\r\n\r\n    return <canvas ref={canvasRef} width={width} height={height} />;\r\n};\r\n\r\nexport default Canvas;\r\n","import React from \"react\";\r\n\r\nimport Canvas from \"./Canvas\";\r\n\r\nconst Display = () => {\r\n    return <Canvas />;\r\n};\r\n\r\nexport default Display;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Checkbox } from \"@mui/material\";\r\n\r\nimport { AnimatedSettingsOverlay } from \"./settings/SettingsOverlay\";\r\nimport Display from \"./display/canvas/Display\";\r\n\r\nconst MainContainer = () => {\r\n    const [checked, setCheck] = useState(true);\r\n    return (\r\n        <div>\r\n            <Checkbox\r\n                sx={{\r\n                    position: \"absolute\",\r\n                    bottom: 7,\r\n                    left: 7,\r\n                }}\r\n                checked={checked}\r\n                onChange={({ target }) => setCheck(target.checked)}\r\n            />\r\n            <AnimatedSettingsOverlay active={checked} />\r\n            <Display />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainContainer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\n\nimport { Provider } from \"react-redux\";\nimport storage from \"./redux/store\";\n\nimport MainContainer from \"./components/MainContainer\";\n\nconst theme = createTheme({\n    palette: {\n        mode: \"dark\",\n    },\n    spacing: 8,\n});\n\nconst App = () => {\n    return (\n        <Provider store={storage}>\n            <React.StrictMode>\n                <ThemeProvider theme={theme}>\n                    <CssBaseline />\n\n                    <MainContainer />\n                </ThemeProvider>\n            </React.StrictMode>\n        </Provider>\n    );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}
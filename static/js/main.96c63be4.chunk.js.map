{"version":3,"sources":["reportWebVitals.js","redux/configSlice.jsx","redux/store.jsx","components/settings/gradient/colorItem.jsx","components/settings/gradient/colorsAdder.jsx","components/settings/common/speed.jsx","components/settings/modes/Blinking.jsx","components/settings/common/rotation.jsx","components/settings/modes/Gradient.jsx","components/settings/imageSlider/fileUploader.jsx","components/settings/modes/ImageSlider.jsx","components/settings/modes/Radial.jsx","components/settings/modeSelector.jsx","components/settings/SettingsContainer.jsx","components/settings/SettingsOverlay.jsx","components/display/windowSize.jsx","components/display/useCanvas.jsx","components/display/drawing/GradientFactory.jsx","components/display/drawing/canvasUpdate.jsx","components/display/drawing/PatternFactory.jsx","components/display/Canvas.jsx","content/city.jpg","components/display/ImageDisplay.jsx","components/display/Display.jsx","components/MainContainer.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configSlice","createSlice","name","initialState","debug","mode","speed","rotation","Math","PI","colors","imageUrl","reducers","setImageUrl","state","payload","setColors","addColor","push","setColorByIndex","index","color","deleteColorByIndex","splice","setMode","setSpeed","setRotation","actions","rootReducer","combineReducers","config","configReducer","storage","configureStore","reducer","changeColor","dispatch","setError","strColor","s","Option","style","isColor","ColorItem","blockDelete","useState","error","useDispatch","ListItem","disablePadding","ml","mr","sx","width","height","backgroundColor","border","borderColor","borderRadius","opacity","ListItemText","TextField","onChange","target","value","id","variant","defaultValue","IconButton","disabled","onClick","ColorsList","useSelector","Grid","item","mt","container","direction","alignItems","length","floor","random","toString","toUpperCase","List","bgcolor","TransitionGroup","map","Collapse","Divider","calculateStorageToSliderSpeed","round","changeSpeed","setSpeedValue","extreme","min","max","calculateSliderToStorageSpeedExtreme","calculateSliderToStorageSpeed","refreshSpeed","calculateStorageToSliderSpeedExtreme","Speed","setExtreme","speedValue","Checkbox","checked","size","Typography","fontSize","Slider","e","step","valueLabelDisplay","Blinking","displayName","children","Rotation","angle","rotationValue","setRotationValue","toFixed","changeRotation","Gradient","FileUploader","currentImageUrl","setCurrentImageUrl","uploadInputRef","useRef","ref","type","accept","image","currentUrl","setCurrentUrl","window","URL","revokeObjectURL","newUrl","createObjectURL","loadFile","files","hidden","Button","current","click","ImageSlider","Radial","Mode","modes","mb","FormControl","fullWidth","InputLabel","Select","label","MenuItem","find","child","SettingsContainer","spacing","padding","justifyContent","gutterBottom","SettingsOverlay","Box","position","top","left","maxWidth","SettingsRef","React","forwardRef","props","AnimatedSettingsOverlay","active","Slide","timeout","enter","exit","easing","in","appear","mountOnEnter","unmountOnExit","useWindowSize","innerWidth","innerHeight","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","useCanvas","draw","displayImage","setdisplayImage","canvasRef","animationFrameId","context","getContext","frameCount","src","Promise","resolve","reject","Image","render","requestAnimationFrame","cancelAnimationFrame","getRadius","canvas","realRadius","sqrt","getRealRadius","colorStopWidth","radius","getColorStopWidth","getSpeed","addColorStops","gradient","i","colorOffset","addColorStop","createGradientType","x1","cos","y1","sin","x2","y2","createLinearGradient","getLinearGradient","createFillStyle","createGradient","createBlinking","createRadialGradient","getRadialGradient","createRadial","createPattern","getImagePattern","createImageSlider","CanvasUpdate","fillStyle","fillRect","font","textAlign","fillText","drawDefault","drawUpdate","beginPath","arc","fill","drawDebug","Canvas","ImageDisplay","winWidth","winHeight","offset","setOffset","setInterval","clearInterval","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","transform","Display","MainContainer","setCheck","bottom","theme","createTheme","palette","App","store","StrictMode","ThemeProvider","CssBaseline","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.96c63be4.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst configSlice = createSlice({\r\n    name: \"config\",\r\n    initialState: {\r\n        debug: true,\r\n        mode: \"blinking\",\r\n        speed: 100,\r\n        rotation: (Math.PI * 5) / 8, //radians\r\n        colors: [\r\n            \"#FF0000\", // Red\r\n            \"#FFA500\", // Orange\r\n            \"#FFFF00\", // Yellow\r\n            \"#008000\", // Green\r\n            \"#0000FF\", // Blue\r\n            \"#4B0082\", // Indigo\r\n            \"#EE82EE\", // Violet\r\n        ],\r\n        imageUrl: null,\r\n    },\r\n    reducers: {\r\n        setImageUrl: (state, { payload }) => {\r\n            state.imageUrl = payload;\r\n        },\r\n\r\n        /*\r\n            Should add a smooth transition between colors\r\n            https://stackoverflow.com/questions/30196043/how-to-display-a-smoother-gradient-in-html5-canvas\r\n            https://stackoverflow.com/questions/21835739/smooth-color-transition-algorithm\r\n        */\r\n\r\n        setColors: (state, { payload }) => {\r\n            state.colors = payload;\r\n        },\r\n        addColor: (state, { payload }) => {\r\n            state.colors.push(payload);\r\n        },\r\n        setColorByIndex: (state, { payload }) => {\r\n            state.colors[payload.index] = payload.color;\r\n        },\r\n        deleteColorByIndex: (state, { payload }) => {\r\n            state.colors.splice(payload, 1);\r\n        },\r\n\r\n        setMode: (state, { payload }) => {\r\n            state.mode = payload;\r\n        },\r\n        setSpeed: (state, { payload }) => {\r\n            state.speed = payload;\r\n        },\r\n        setRotation: (state, { payload }) => {\r\n            state.rotation = payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setImageUrl, setMode, setSpeed, setRotation, addColor, setColorByIndex, deleteColorByIndex } =\r\n    configSlice.actions;\r\n\r\nexport default configSlice.reducer;\r\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport configReducer from \"./configSlice\";\r\n\r\nconst rootReducer = combineReducers({\r\n    config: configReducer,\r\n});\r\n\r\nconst storage = configureStore({\r\n    reducer: rootReducer,\r\n});\r\n\r\nexport default storage;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\n\r\nimport { IconButton, TextField } from \"@mui/material\";\r\nimport { ListItem, ListItemText } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\n\r\nimport { deleteColorByIndex, setColorByIndex } from \"../../../redux/configSlice\";\r\n\r\nconst isColor = (strColor) => {\r\n    const s = new Option().style;\r\n    s.color = strColor;\r\n    return s.color !== \"\";\r\n};\r\n\r\nconst changeColor = (dispatch, index, color, setError) => {\r\n    if (!isColor(color)) {\r\n        setError(true);\r\n        return;\r\n    }\r\n    setError(false);\r\n    dispatch(setColorByIndex({ index, color }));\r\n};\r\n\r\nconst ColorItem = ({ color, index, blockDelete }) => {\r\n    const [error, setError] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <ListItem disablePadding>\r\n            <Box\r\n                ml={1}\r\n                mr={1}\r\n                sx={{\r\n                    width: 70,\r\n                    height: 25,\r\n                    backgroundColor: color,\r\n                    border: 2,\r\n                    borderColor: \"#aaaaaa\",\r\n                    borderRadius: 2,\r\n                    \"&:hover\": {\r\n                        backgroundColor: color,\r\n                        opacity: [0.8, 0.8, 0.8],\r\n                    },\r\n                }}\r\n            />\r\n\r\n            <ListItemText>\r\n                <TextField\r\n                    onChange={({ target }) => changeColor(dispatch, index, target.value, setError)}\r\n                    id=\"standard-basic\"\r\n                    variant=\"standard\"\r\n                    color={error ? \"error\" : \"primary\"}\r\n                    defaultValue={color}\r\n                />\r\n            </ListItemText>\r\n            <IconButton\r\n                disabled={blockDelete}\r\n                onClick={() => {\r\n                    dispatch(deleteColorByIndex(index));\r\n                }}\r\n            >\r\n                <DeleteIcon />\r\n            </IconButton>\r\n        </ListItem>\r\n    );\r\n};\r\n\r\nexport default ColorItem;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\n\r\nimport { Grid, IconButton } from \"@mui/material\";\r\nimport { List, Divider } from \"@mui/material\";\r\nimport { Collapse } from \"@mui/material\";\r\n\r\nimport { addColor } from \"../../../redux/configSlice\";\r\nimport ColorItem from \"./colorItem\";\r\n\r\nimport { TransitionGroup } from \"react-transition-group\";\r\n\r\nconst RandomColor = () => {\r\n    return (\r\n        \"#\" +\r\n        Math.floor(Math.random() * 16777215)\r\n            .toString(16)\r\n            .toUpperCase()\r\n    );\r\n};\r\n\r\nconst ColorsList = () => {\r\n    const config = useSelector((storage) => storage.config);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Grid item mt={-1}>\r\n            <Grid container direction=\"row\" alignItems=\"center\">\r\n                <Grid item>Colors</Grid>\r\n                <Grid item>\r\n                    <IconButton disabled={config.colors.length >= 9} onClick={() => dispatch(addColor(RandomColor()))}>\r\n                        <AddIcon />\r\n                    </IconButton>\r\n                </Grid>\r\n            </Grid>\r\n            <List sx={{ width: \"100%\", bgcolor: \"#00000050\", borderRadius: 3 }}>\r\n                <TransitionGroup>\r\n                    {config.colors.map((color, index) => (\r\n                        <Collapse key={color}>\r\n                            {index !== 0 && <Divider />}\r\n                            <ColorItem blockDelete={config.colors.length < 2} color={color} index={index}></ColorItem>\r\n                        </Collapse>\r\n                    ))}\r\n                </TransitionGroup>\r\n            </List>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default ColorsList;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Checkbox, Typography, Grid, Slider } from \"@mui/material\";\r\n\r\nimport { setSpeed } from \"../../../redux/configSlice\";\r\n\r\nconst calculateSliderToStorageSpeed = (speed) => {\r\n    return (1 - speed / 100) * 110 + 10;\r\n};\r\n\r\nconst calculateStorageToSliderSpeed = (speed) => {\r\n    return Math.round((1 - (speed - 10) / 110) * 100);\r\n};\r\n\r\nconst calculateSliderToStorageSpeedExtreme = (speed) => {\r\n    return (1 - speed / 100) * 110 + 1;\r\n};\r\n\r\nconst calculateStorageToSliderSpeedExtreme = (speed) => {\r\n    return Math.round((1 - (speed - 1) / 110) * 100);\r\n};\r\n\r\nconst changeSpeed = (value, setSpeedValue, dispatch, extreme) => {\r\n    value = Math.min(Math.max(value, 0), 100);\r\n    setSpeedValue(value);\r\n    if (extreme) {\r\n        dispatch(setSpeed(calculateSliderToStorageSpeedExtreme(value)));\r\n    } else {\r\n        dispatch(setSpeed(calculateSliderToStorageSpeed(value)));\r\n    }\r\n};\r\n\r\nconst refreshSpeed = (config, setSpeedValue, dispatch, extreme) => {\r\n    if (extreme) {\r\n        changeSpeed(calculateStorageToSliderSpeed(config.speed), setSpeedValue, dispatch, extreme);\r\n    } else {\r\n        changeSpeed(calculateStorageToSliderSpeedExtreme(config.speed), setSpeedValue, dispatch, extreme);\r\n    }\r\n};\r\n\r\nconst Speed = () => {\r\n    const config = useSelector((storage) => storage.config);\r\n    const dispatch = useDispatch();\r\n\r\n    const [extreme, setExtreme] = useState(false);\r\n\r\n    const [speedValue, setSpeedValue] = useState(calculateStorageToSliderSpeed(config.speed));\r\n\r\n    return (\r\n        <>\r\n            <Grid container direction=\"row\" alignItems=\"center\">\r\n                <Grid item>Speed</Grid>\r\n                <Grid item ml={1} mr={-1}>\r\n                    <Checkbox\r\n                        onChange={({ target }) => {\r\n                            setExtreme(target.checked);\r\n                            refreshSpeed(config, setSpeedValue, dispatch, target.checked);\r\n                        }}\r\n                        color=\"error\"\r\n                        size=\"small\"\r\n                        checked={extreme}\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Typography fontSize={10}>Extreme mode</Typography>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid mt={-1} item>\r\n                <Slider\r\n                    onChange={(e, value) => changeSpeed(value, setSpeedValue, dispatch, extreme)}\r\n                    defaultValue={speedValue}\r\n                    min={0}\r\n                    max={100}\r\n                    step={1}\r\n                    value={speedValue}\r\n                    valueLabelDisplay=\"auto\"\r\n                />\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Speed;\r\n\r\n/*\r\n\r\nFIX: when changing non-extreme max value to extreme, speed should not change. Instead it maxes out\r\n\r\n*/\r\n","import ColorsList from \"../gradient/colorsAdder\";\r\nimport Speed from \"../common/speed\";\r\n\r\nconst Blinking = {\r\n    name: \"blinking\",\r\n    displayName: \"Blinking\",\r\n    children: [<Speed key={\"BlinkingSpeed\"} />, <ColorsList key={\"BlinkingColorsList\"} />],\r\n};\r\n\r\nexport default Blinking;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Grid, Slider } from \"@mui/material\";\r\n\r\nimport { setRotation } from \"../../../redux/configSlice\";\r\n\r\nconst getRotationLabel = (angle) => {\r\n    return `${angle.toFixed(2)} rad / ${((angle * 180) / Math.PI).toFixed(2)} degrees`;\r\n};\r\n\r\nconst changeRotation = (rotation, setRotationValue, dispatch) => {\r\n    setRotationValue(rotation);\r\n    dispatch(setRotation(rotation));\r\n};\r\n\r\nconst Rotation = () => {\r\n    const config = useSelector((storage) => storage.config);\r\n    const dispatch = useDispatch();\r\n    const [rotationValue, setRotationValue] = useState(config.rotation);\r\n    return (\r\n        <>\r\n            <Grid item>Rotation - {getRotationLabel(config.rotation)}</Grid>\r\n            <Grid item>\r\n                <Slider\r\n                    onChange={(e, value) => changeRotation(value, setRotationValue, dispatch)}\r\n                    defaultValue={rotationValue}\r\n                    min={0}\r\n                    max={Math.PI * 2}\r\n                    //step={Math.PI / 4}\r\n                    step={0.01}\r\n                    value={rotationValue}\r\n                    valueLabelDisplay=\"off\"\r\n                />\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Rotation;\r\n","import Rotation from \"../common/rotation\";\r\nimport Speed from \"../common/speed\";\r\nimport ColorsList from \"../gradient/colorsAdder\";\r\n\r\nconst Gradient = {\r\n    name: \"gradient\",\r\n    displayName: \"Gradient\",\r\n    children: [\r\n        <Speed key={\"GradientSpeed\"} />,\r\n        <Rotation key={\"GradientRotation\"} />,\r\n        <ColorsList key={\"GradientColorsList\"} />,\r\n    ],\r\n};\r\n\r\nexport default Gradient;\r\n","import React, { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { Button } from \"@mui/material\";\r\nimport { setImageUrl } from \"../../../redux/configSlice\";\r\n\r\nconst loadFile = (image, dispatch, currentUrl, setCurrentUrl) => {\r\n    if (currentUrl !== null) {\r\n        window.URL.revokeObjectURL(currentUrl);\r\n    }\r\n    let newUrl = window.URL.createObjectURL(image);\r\n    dispatch(setImageUrl(newUrl));\r\n    setCurrentUrl(newUrl);\r\n};\r\n\r\nconst FileUploader = () => {\r\n    const dispatch = useDispatch();\r\n    const [currentImageUrl, setCurrentImageUrl] = useState(null);\r\n\r\n    const uploadInputRef = useRef(null);\r\n    return (\r\n        <>\r\n            <input\r\n                ref={uploadInputRef}\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={({ target }) => loadFile(target.files[0], dispatch, currentImageUrl, setCurrentImageUrl)}\r\n                hidden\r\n            />\r\n            <Button onClick={() => uploadInputRef.current && uploadInputRef.current.click()} variant=\"outlined\">\r\n                Upload image\r\n            </Button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FileUploader;\r\n","import FileUploader from \"../imageSlider/fileUploader\";\r\nimport Speed from \"../common/speed\";\r\nimport Rotation from \"../common/rotation\";\r\n\r\nconst ImageSlider = {\r\n    name: \"image\",\r\n    displayName: \"Image\",\r\n    children: [\r\n        <Speed key={\"ImageSpeed\"} />,\r\n        <Rotation key={\"ImageRotation\"} />,\r\n        <FileUploader key={\"ImageFileUploader\"} />,\r\n    ],\r\n};\r\n\r\nexport default ImageSlider;\r\n","import ColorsList from \"../gradient/colorsAdder\";\r\nimport Speed from \"../common/speed\";\r\n\r\nconst Radial = {\r\n    name: \"radial\",\r\n    displayName: \"Radial\",\r\n    children: [<Speed key={\"RadialSpeed\"} />, <ColorsList key={\"RadialColorsList\"} />],\r\n};\r\n\r\nexport default Radial;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Grid, FormControl, InputLabel, Select, MenuItem } from \"@mui/material\";\r\n\r\nimport { setMode } from \"../../redux/configSlice\";\r\n\r\nimport Blinking from \"./modes/Blinking\";\r\nimport Gradient from \"./modes/Gradient\";\r\nimport ImageSlider from \"./modes/ImageSlider\";\r\nimport Radial from \"./modes/Radial\";\r\n\r\nconst Mode = () => {\r\n    const config = useSelector((storage) => storage.config);\r\n    const dispatch = useDispatch();\r\n\r\n    let modes = [Blinking, Gradient, Radial, ImageSlider];\r\n\r\n    const changeMode = ({ target }) => dispatch(setMode(target.value));\r\n\r\n    return (\r\n        <>\r\n            <Grid item mb={1}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel>Display mode</InputLabel>\r\n                    <Select value={config.mode} label=\"Display mode\" onChange={changeMode}>\r\n                        {modes.map((mode) => (\r\n                            <MenuItem key={mode.name} value={mode.name}>\r\n                                {mode.displayName}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            {modes.find((mode) => mode.name === config.mode).children.map((child) => child)}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Mode;\r\n","import React from \"react\";\r\n//import { useSelector, useDispatch } from \"react-redux\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\n\r\nimport Mode from \"./modeSelector\";\r\n\r\nconst SettingsContainer = () => {\r\n    //const config = useSelector((storage) => storage.config);\r\n    //const dispatch = useDispatch();\r\n    return (\r\n        <Grid container spacing={2} sx={{ padding: 2 }}>\r\n            <Grid container justifyContent=\"center\" item mb={-1}>\r\n                <Typography gutterBottom variant=\"h5\">\r\n                    Settings\r\n                </Typography>\r\n            </Grid>\r\n\r\n            <Grid container direction=\"column\" item>\r\n                <Mode />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SettingsContainer;\r\n","import React from \"react\";\r\nimport { Box, Slide } from \"@mui/material\";\r\nimport SettingsContainer from \"./SettingsContainer\";\r\n\r\nconst SettingsOverlay = () => {\r\n    return (\r\n        <Box\r\n            sx={{\r\n                position: \"absolute\",\r\n                top: 7,\r\n                left: 7,\r\n                width: \"100%\",\r\n                maxWidth: 350,\r\n                backgroundColor: \"#101020a0\",\r\n                borderRadius: 3,\r\n            }}\r\n        >\r\n            <SettingsContainer />\r\n        </Box>\r\n    );\r\n};\r\n\r\nconst SettingsRef = React.forwardRef((props, ref) => {\r\n    return (\r\n        <div ref={ref} {...props}>\r\n            <SettingsOverlay />\r\n        </div>\r\n    );\r\n});\r\n\r\nconst AnimatedSettingsOverlay = ({ active }) => {\r\n    return (\r\n        <Slide\r\n            timeout={{ enter: 3e2, exit: 1e3 }}\r\n            easing={{ enter: \"cubic-bezier(0, 0.5, 1, 1)\" }}\r\n            direction=\"right\"\r\n            in={active}\r\n            appear={false}\r\n            mountOnEnter\r\n            unmountOnExit\r\n        >\r\n            <SettingsRef />\r\n        </Slide>\r\n    );\r\n};\r\n\r\nexport { AnimatedSettingsOverlay };\r\nexport default SettingsOverlay;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst useWindowSize = () => {\r\n    const [windowSize, setWindowSize] = useState([window.innerWidth, window.innerHeight]);\r\n    useEffect(() => {\r\n        const handleResize = () => setWindowSize([window.innerWidth, window.innerHeight]);\r\n\r\n        window.addEventListener(\"resize\", () => handleResize());\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []);\r\n\r\n    return windowSize;\r\n};\r\n\r\nexport default useWindowSize;\r\n","import { useState, useRef, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst createNewImage = (newUrl) => {\r\n    return new Promise((resolve, reject) => {\r\n        const image = new Image();\r\n        image.src = newUrl;\r\n        image.addEventListener(\"load\", (e) => {\r\n            resolve(image);\r\n        });\r\n    });\r\n};\r\n\r\nconst useCanvas = (draw) => {\r\n    const [displayImage, setdisplayImage] = useState(null);\r\n\r\n    const canvasRef = useRef(null);\r\n    const config = useSelector((storage) => storage.config);\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext(\"2d\");\r\n        let frameCount = 0;\r\n        let animationFrameId;\r\n\r\n        if (config.imageUrl !== null && (displayImage === null || config.imageUrl !== displayImage.src)) {\r\n            createNewImage(config.imageUrl).then((image) => {\r\n                setdisplayImage(image);\r\n            });\r\n        }\r\n\r\n        const render = () => {\r\n            frameCount++;\r\n            draw(context, frameCount, config, displayImage);\r\n            animationFrameId = window.requestAnimationFrame(render);\r\n        };\r\n        render();\r\n\r\n        return () => {\r\n            window.cancelAnimationFrame(animationFrameId);\r\n        };\r\n    }, [draw, config, displayImage]);\r\n\r\n    return canvasRef;\r\n};\r\n\r\nexport default useCanvas;\r\n","const getRealRadius = (canvas) => {\r\n    return Math.sqrt(canvas.width ** 2 + canvas.height ** 2) / 2;\r\n};\r\n\r\nconst getColorStopWidth = (radius, colors) => {\r\n    return (radius * 2) / colors.length;\r\n};\r\n\r\nconst getRadius = (canvas, colors, mode) => {\r\n    //circumscribed circle around canvas rectangle\r\n    let realRadius = getRealRadius(canvas);\r\n\r\n    //how much space one color takes up\r\n    let colorStopWidth = getColorStopWidth(realRadius, colors);\r\n\r\n    let radius = 0;\r\n    if (mode === \"blinking\") {\r\n        // set circumscribed circle's radius to a color stop\r\n        radius = realRadius * colorStopWidth;\r\n    } else if (mode === \"gradient\" || mode === \"radial\") {\r\n        //increase circumscribed circle's radius by a color stop\r\n        radius = realRadius + colorStopWidth;\r\n    }\r\n\r\n    return radius;\r\n};\r\n\r\nconst getLinearGradient = (context, rotation, radius) => {\r\n    let canvas = context.canvas;\r\n    //calculate location of points on a circle based on rotation\r\n    let x1 = Math.cos(-rotation + Math.PI) * radius + canvas.width / 2;\r\n    let y1 = Math.sin(-rotation + Math.PI) * radius + canvas.height / 2;\r\n    let x2 = Math.cos(-rotation) * radius + canvas.width / 2;\r\n    let y2 = Math.sin(-rotation) * radius + canvas.height / 2;\r\n\r\n    return context.createLinearGradient(x1, y1, x2, y2);\r\n};\r\n\r\nconst getRadialGradient = (context, radius) => {\r\n    let canvas = context.canvas;\r\n    return context.createRadialGradient(\r\n        canvas.width / 2,\r\n        canvas.height / 2,\r\n        0,\r\n        canvas.width / 2,\r\n        canvas.height / 2,\r\n        radius\r\n    );\r\n};\r\n\r\nconst getSpeed = (frameCount, speed) => frameCount / speed;\r\n\r\n/* ------------------------------ */\r\n\r\n/* BROKEN\r\nconst addColorStops = (gradient, speed, colors) => {\r\n    let minOffset = 1;\r\n    let baseColorIndex = null;\r\n\r\n    for (let i = 0; i < colors.length; i++) {\r\n        let colorOffset = ((i + speed) % colors.length) / colors.length;\r\n\r\n        if (colorOffset < minOffset) {\r\n            minOffset = colorOffset;\r\n            baseColorIndex = i;\r\n        }\r\n\r\n        gradient.addColorStop(colorOffset, colors[i]);\r\n    }\r\n    if (baseColorIndex + speed > 0.001) {\r\n        let baseIndex = (baseColorIndex - 1 + colors.length) % colors.length;\r\n        gradient.addColorStop(0, colors[baseIndex]);\r\n    }\r\n    return gradient;\r\n};\r\n*/\r\n\r\nconst addColorStops = (gradient, speed, colors) => {\r\n    for (let i = 0; i < colors.length; i++) {\r\n        let colorOffset = ((i + speed) % colors.length) / colors.length;\r\n        gradient.addColorStop(colorOffset, colors[i]);\r\n    }\r\n    return gradient;\r\n};\r\n\r\n/* ------------------------------ */\r\n\r\nconst createGradientType = (context, config, frameCount, mode) => {\r\n    let canvas = context.canvas;\r\n    const radius = getRadius(canvas, config.colors, mode);\r\n    const gradient = getLinearGradient(context, config.rotation, radius);\r\n\r\n    return addColorStops(gradient, getSpeed(frameCount, config.speed), config.colors);\r\n};\r\n\r\n//Have to fix: Transition between colors is flickering when there are only few colors\r\nconst createGradient = (context, config, frameCount) => {\r\n    return createGradientType(context, config, frameCount, \"gradient\");\r\n};\r\n\r\nconst createBlinking = (context, config, frameCount) => {\r\n    return createGradientType(context, config, frameCount, \"blinking\");\r\n};\r\n\r\nconst createRadial = (context, config, frameCount) => {\r\n    let canvas = context.canvas;\r\n    const radius = getRadius(canvas, config.colors, \"radial\");\r\n    const gradient = getRadialGradient(context, radius);\r\n\r\n    return addColorStops(gradient, getSpeed(frameCount, config.speed), config.colors);\r\n};\r\n\r\nexport { createGradient, createBlinking, createRadial };\r\n","import { createBlinking, createGradient, createRadial } from \"./GradientFactory\";\r\nimport { createImageSlider } from \"./PatternFactory\";\r\n\r\nconst drawDebug = (context, frameCount) => {\r\n    const canvas = context.canvas;\r\n    let radius = 80;\r\n    context.fillStyle = \"#ffffffa0\";\r\n    context.beginPath();\r\n    context.arc(\r\n        canvas.width - radius - 10,\r\n        canvas.height - radius - 10,\r\n        radius * Math.sin(frameCount * 0.05) ** 2,\r\n        0,\r\n        2 * Math.PI\r\n    );\r\n    context.fill();\r\n};\r\n\r\nconst drawDefault = (context) => {\r\n    const canvas = context.canvas;\r\n    context.fillStyle = \"black\";\r\n    context.fillRect(0, 0, canvas.width, canvas.height);\r\n    context.font = \"48px courier\";\r\n    context.textAlign = \"center\";\r\n    context.fillStyle = \"white\";\r\n    context.fillText(\"No input\", canvas.width / 2, canvas.height / 2);\r\n};\r\n\r\nconst createFillStyle = (context, config, frameCount, image) => {\r\n    switch (config.mode) {\r\n        case \"gradient\":\r\n            return createGradient(context, config, frameCount);\r\n        case \"blinking\":\r\n            return createBlinking(context, config, frameCount);\r\n        case \"radial\":\r\n            return createRadial(context, config, frameCount);\r\n        case \"image\": {\r\n            if (image !== null) return createImageSlider(context, image);\r\n            return null;\r\n        }\r\n        default:\r\n            return null;\r\n    }\r\n};\r\n\r\nconst drawUpdate = (context, config) => {\r\n    const canvas = context.canvas;\r\n    switch (config.mode) {\r\n        case \"gradient\":\r\n        case \"blinking\":\r\n        case \"radial\": {\r\n            context.fillRect(0, 0, canvas.width, canvas.height);\r\n            break;\r\n        }\r\n        default:\r\n            break;\r\n    }\r\n\r\n    if (config.mode === \"image\") {\r\n        context.fillRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n};\r\n\r\nconst CanvasUpdate = (context, frameCount, config, image) => {\r\n    drawDefault(context);\r\n\r\n    let fillStyle = createFillStyle(context, config, frameCount, image);\r\n    if (fillStyle !== null) {\r\n        context.fillStyle = fillStyle;\r\n        drawUpdate(context, config);\r\n    }\r\n\r\n    if (config.debug) {\r\n        drawDebug(context, frameCount);\r\n    }\r\n};\r\n\r\nexport default CanvasUpdate;\r\n","const getImagePattern = (context, image) => {\r\n    let pattern = context.createPattern(image, \"repeat\"); //change repeat to config.repetition pattern\r\n    return pattern;\r\n};\r\n\r\n/* ------------------------------ */\r\n\r\nconst createImageSlider = (context, image) => {\r\n    return getImagePattern(context, image);\r\n};\r\n\r\nexport { createImageSlider };\r\n","import React from \"react\";\r\nimport useWindowSize from \"./windowSize\";\r\n\r\nimport useCanvas from \"./useCanvas\";\r\n\r\nimport CanvasUpdate from \"./drawing/canvasUpdate\";\r\n\r\nconst Canvas = () => {\r\n    const [width, height] = useWindowSize();\r\n    const canvasRef = useCanvas(CanvasUpdate);\r\n\r\n    return <canvas ref={canvasRef} width={width} height={height} />;\r\n};\r\n\r\nexport default Canvas;\r\n","export default __webpack_public_path__ + \"static/media/city.ea63c51b.jpg\";","import React, { useEffect, useState } from \"react\";\r\nimport useWindowSize from \"./windowSize\";\r\nimport { Box } from \"@mui/system\";\r\n\r\nimport Image from \"../../content/city.jpg\";\r\n\r\nconst ImageDisplay = () => {\r\n    const [winWidth, winHeight] = useWindowSize();\r\n    const [offset, setOffset] = useState(0);\r\n\r\n    //just a quick hack. improve later.\r\n    useEffect(() => {\r\n        let id = setInterval(() => {\r\n            setOffset((offset + 1) % 1000);\r\n        }, 10);\r\n        return () => clearInterval(id);\r\n    }, [offset]);\r\n\r\n    return (\r\n        <Box\r\n            sx={{\r\n                width: winWidth,\r\n                height: winHeight,\r\n                backgroundImage: `url(${Image})`,\r\n                backgroundSize: \"contain\",\r\n                backgroundPosition: offset + \"%\",\r\n                backgroundRepeat: \"repeat\",\r\n                transform: \"rotate(20deg)\",\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ImageDisplay;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport Canvas from \"./Canvas\";\r\nimport ImageDisplay from \"./ImageDisplay\";\r\n\r\nconst Display = () => {\r\n    const mode = useSelector((storage) => storage.config.mode);\r\n    if (mode === \"image\") return <ImageDisplay />;\r\n    return <Canvas />;\r\n};\r\n\r\nexport default Display;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { AnimatedSettingsOverlay } from \"./settings/SettingsOverlay\";\r\nimport Display from \"./display/Display\";\r\nimport { Checkbox } from \"@mui/material\";\r\n\r\nconst MainContainer = () => {\r\n    const [checked, setCheck] = useState(true);\r\n    return (\r\n        <div>\r\n            <Checkbox\r\n                sx={{\r\n                    position: \"absolute\",\r\n                    bottom: 7,\r\n                    left: 7,\r\n                }}\r\n                checked={checked}\r\n                onChange={({ target }) => setCheck(target.checked)}\r\n            />\r\n            <AnimatedSettingsOverlay active={checked} />\r\n            <Display />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainContainer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\n\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { Provider } from \"react-redux\";\nimport storage from \"./redux/store\";\n\nimport MainContainer from \"./components/MainContainer\";\n\nconst theme = createTheme({\n    palette: {\n        mode: \"dark\",\n    },\n    spacing: 8,\n});\n\nconst App = () => {\n    return (\n        <Provider store={storage}>\n            <React.StrictMode>\n                <ThemeProvider theme={theme}>\n                    <CssBaseline />\n\n                    <MainContainer />\n                </ThemeProvider>\n            </React.StrictMode>\n        </Provider>\n    );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}